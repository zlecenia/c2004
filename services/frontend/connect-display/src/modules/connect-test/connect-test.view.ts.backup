import { ConnectTestModule } from './connect-test.module';
import { TestDevice } from './connect-test.service';

export class ConnectTestView {
  private module: ConnectTestModule;
  private currentTab: string = 'identification';

  constructor(module: ConnectTestModule) {
    this.module = module;
  }

  render(): HTMLElement {
    const container = document.createElement('div');
    container.className = 'connect-test-page';
    
    container.innerHTML = `
      <div class="connect-test-container">
        <div class="header-section">
          <h1>🧪 ConnectTest - System Testowania</h1>
          <div class="header-status">
            <span class="system-status" id="system-status">
              <span class="status-dot ready"></span>
              System Ready
            </span>
          </div>
        </div>

        <!-- Tab Navigation -->
        <div class="tab-navigation">
          <button class="tab-btn active" data-tab="identification">🔍 Identyfikacja</button>
          <button class="tab-btn" data-tab="device-selection">📱 Wybór Urządzenia</button>
          <button class="tab-btn" data-tab="testing">🧪 Testowanie</button>
          <button class="tab-btn" data-tab="reports">📋 Raporty Urządzeń</button>
          <button class="tab-btn" data-tab="debug">🔧 Debug</button>
        </div>

        <div class="main-content-area">
          <!-- Identification Tab -->
          <div id="identification-tab" class="section active">
            <h2>🔍 Identyfikacja Operatora</h2>
            <div class="connectid-container">
              <div class="identification-prompt">
                <p>Zidentyfikuj się aby rozpocząć pracę z systemem testowania</p>
                <button class="btn btn-primary" id="init-connectid">🔍 Uruchom identyfikację</button>
              </div>
              <div class="operator-info" id="operator-info" style="display: none;">
                <div class="operator-card">
                  <h4>👤 Operator zidentyfikowany</h4>
                  <p><strong>Imię:</strong> <span id="operator-name">Jan Kowalski</span></p>
                  <p><strong>ID:</strong> <span id="operator-id">OP-001</span></p>
                  <p><strong>Uprawnienia:</strong> <span id="operator-permissions">Test Administrator</span></p>
                  <button class="btn btn-outline-secondary btn-sm" id="change-operator">🔄 Zmień operatora</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Device Selection Tab -->
          <div id="device-selection-tab" class="section">
            <h2>📱 Wybór Urządzenia</h2>
            
            <!-- Test Type Selector -->
            <div class="test-type-selector">
              <label>Typ testu:</label>
              <div class="test-radio-group">
                <label class="radio-option">
                  <input type="radio" name="test-type" value="pressure">
                  <span>🔧 Szczelność</span>
                </label>
                <label class="radio-option">
                  <input type="radio" name="test-type" value="flow">
                  <span>🌊 Przepływ</span>
                </label>
                <label class="radio-option">
                  <input type="radio" name="test-type" value="function" checked>
                  <span>⚙️ Funkcyjny</span>
                </label>
                <label class="radio-option">
                  <input type="radio" name="test-type" value="visual">
                  <span>👁️ Wizualny</span>
                </label>
                <label class="radio-option">
                  <input type="radio" name="test-type" value="maintenance">
                  <span>🔩 Konserwacja</span>
                </label>
                <label class="radio-option">
                  <input type="radio" name="test-type" value="calibration">
                  <span>📏 Kalibracja</span>
                </label>
              </div>
            </div>

            <div class="device-search">
              <div class="search-filters">
                <input type="text" class="form-control" placeholder="Szukaj urządzenia..." id="device-search-input">
                <select class="form-select" id="device-type-filter">
                  <option value="">Wszystkie typy</option>
                  <option value="PP Mask G1">PP Mask G1</option>
                  <option value="SCBA PSS-7000">SCBA PSS-7000</option>
                  <option value="NP Mask FPS">NP Mask FPS</option>
                  <option value="PP Mask Ultra Elite">PP Mask Ultra Elite</option>
                </select>
                <select class="form-select" id="device-status-filter">
                  <option value="">Wszystkie statusy</option>
                  <option value="pending">Oczekujące</option>
                  <option value="completed">Ukończone</option>
                  <option value="failed">Nieudane</option>
                  <option value="warning">Ostrzeżenia</option>
                </select>
                <button class="btn btn-primary" id="search-devices">🔍 Szukaj</button>
              </div>
              <div class="search-results" id="device-results">
                <!-- Device search results will appear here -->
              </div>
            </div>
          </div>

          <!-- Testing Tab -->
          <div id="testing-tab" class="section">
            <h2>🧪 Testowanie Urządzenia</h2>
            <div class="testing-interface">
              <!-- Single Device Testing -->
              <div id="single-testing" class="testing-mode">
                <h3>📱 Test pojedynczego urządzenia</h3>
                <div class="device-info" id="single-device-info">
                  <p>Wybierz urządzenie z zakładki "Wybór urządzenia"</p>
                </div>
                
                <div class="test-controls">
                  <button class="btn btn-warning" id="pause-test" style="display: none;">⏸ Pauza</button>
                  <button class="btn btn-danger" id="stop-test" style="display: none;">⏹ Przerwij test</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Reports Tab -->
          <div id="reports-tab" class="section">
            <h2>📋 Raporty Urządzeń</h2>
            <div class="reports-interface">
              <div class="report-filters">
                <select class="form-select" id="report-type">
                  <option value="device">Pojedyncze urządzenie</option>
                  <option value="summary">Podsumowanie testów</option>
                  <option value="history">Historia testów</option>
                </select>
                <input type="date" class="form-control" id="report-date-from" placeholder="Data od">
                <input type="date" class="form-control" id="report-date-to" placeholder="Data do">
                <select class="form-select" id="report-device-filter">
                  <option value="">Wszystkie urządzenia</option>
                  <option value="PP Mask G1">PP Mask G1</option>
                  <option value="SCBA PSS-7000">SCBA PSS-7000</option>
                  <option value="NP Mask FPS">NP Mask FPS</option>
                </select>
                <button class="btn btn-primary" id="generate-report">📊 Generuj raport</button>
              </div>
              
              <div class="recent-reports">
                <h4>Ostatnie raporty urządzeń</h4>
                <div class="report-list" id="report-list">
                  <div class="report-item">
                    <div class="report-info">
                      <span class="report-name">Raport urządzenia: G1-001234</span>
                      <span class="report-date">2025-10-08 14:30</span>
                      <span class="report-status">✅ Passed</span>
                    </div>
                    <div class="report-actions">
                      <button class="btn btn-sm btn-info">👁️ Zobacz</button>
                      <button class="btn btn-sm btn-success">⬇️ Pobierz</button>
                    </div>
                  </div>
                  <div class="report-item">
                    <div class="report-info">
                      <span class="report-name">Historia testów: PSS-7000</span>
                      <span class="report-date">2025-10-08 13:15</span>
                      <span class="report-status">⚠️ Warning</span>
                    </div>
                    <div class="report-actions">
                      <button class="btn btn-sm btn-info">👁️ Zobacz</button>
                      <button class="btn btn-sm btn-success">⬇️ Pobierz</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Debug Tab -->
          <div id="debug-tab" class="section">
            <h2>🔧 Debug API</h2>
            <div class="debug-interface">
              <div class="debug-actions">
                <button class="btn btn-outline-primary" id="debug-test-device">Test Single Device</button>
                <button class="btn btn-outline-warning" id="debug-stop-all">Stop All Tests</button>
                <button class="btn btn-outline-info" id="debug-clear-log">Clear Log</button>
              </div>
              <div id="debug-result" class="debug-output">
                <p>Debug console - device test actions will appear here</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    this.addStyles();
    this.setupEventListeners(container);
    this.loadInitialData();

    // Make methods globally accessible
    (window as any).connectTestView = this;

    return container;
  }

  private addStyles(): void {
    const style = document.createElement('style');
    style.textContent = `
      .connect-test-page {
        padding: 20px;
        max-width: 1400px;
        margin: 0 auto;
      }

      .connect-test-container {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }

      .header-section {
        background: linear-gradient(135deg, #6f42c1 0%, #8b5cf6 100%);
        color: white;
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .header-section h1 {
        margin: 0;
        font-size: 1.5rem;
      }

      .system-status {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
      }

      .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        animation: pulse 2s infinite;
      }

      .status-dot.ready {
        background: #10b981;
      }

      @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
      }

      .tab-navigation {
        display: flex;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        overflow-x: auto;
      }

      .tab-btn {
        padding: 15px 20px;
        border: none;
        background: none;
        cursor: pointer;
        border-bottom: 3px solid transparent;
        transition: all 0.2s;
        white-space: nowrap;
        font-size: 0.9rem;
      }

      .tab-btn.active {
        background: white;
        border-bottom-color: #6f42c1;
        color: #6f42c1;
        font-weight: 600;
      }

      .tab-btn:hover:not(.active) {
        background: #e9ecef;
      }

      .main-content-area {
        padding: 20px;
      }

      .section {
        display: none;
      }

      .section.active {
        display: block;
      }

      .section h2 {
        margin-bottom: 20px;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
        padding-bottom: 10px;
      }

      .connectid-container {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
      }

      .operator-card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        border-left: 4px solid #28a745;
        text-align: left;
      }

      .test-type-selector {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
      }

      .test-type-selector label {
        font-weight: 600;
        margin-bottom: 15px;
        display: block;
        color: #495057;
      }

      .test-radio-group {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 10px;
      }

      .radio-option {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 15px;
        background: white;
        border: 2px solid #dee2e6;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
        font-weight: normal;
        margin: 0;
      }

      .radio-option:hover {
        border-color: #6f42c1;
        background: #f8f7ff;
      }

      .radio-option input[type="radio"] {
        margin: 0;
      }

      .radio-option input[type="radio"]:checked + span {
        color: #6f42c1;
        font-weight: 600;
      }

      .radio-option:has(input[type="radio"]:checked) {
        border-color: #6f42c1;
        background: #f8f7ff;
      }

      .search-filters {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
      }

      .search-filters > * {
        flex: 1;
        min-width: 150px;
      }

      .form-control, .form-select {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
      }

      .btn {
        padding: 8px 16px;
        border: 1px solid transparent;
        border-radius: 4px;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s;
        text-align: center;
      }

      .btn-primary {
        background: #6f42c1;
        color: white;
        border-color: #6f42c1;
      }

      .btn-primary:hover {
        background: #5a2d91;
        border-color: #5a2d91;
      }

      .btn-success {
        background: #28a745;
        color: white;
        border-color: #28a745;
      }

      .btn-warning {
        background: #ffc107;
        color: #212529;
        border-color: #ffc107;
      }

      .btn-danger {
        background: #dc3545;
        color: white;
        border-color: #dc3545;
      }

      .btn-secondary {
        background: #6c757d;
        color: white;
        border-color: #6c757d;
      }

      .btn-outline-primary {
        color: #6f42c1;
        border-color: #6f42c1;
        background: transparent;
      }

      .btn-outline-secondary {
        color: #6c757d;
        border-color: #6c757d;
        background: transparent;
      }

      .btn-sm {
        padding: 4px 8px;
        font-size: 12px;
      }

      .device-results {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 15px;
      }

      .device-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 15px;
        transition: all 0.2s;
      }

      .device-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        border-color: #6f42c1;
      }

      .device-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
      }

      .device-id {
        font-weight: 600;
        margin: 0;
      }

      .badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
      }

      .bg-primary {
        background: #6f42c1;
        color: white;
      }

      .bg-success {
        background: #28a745;
        color: white;
      }

      .bg-warning {
        background: #ffc107;
        color: #212529;
      }

      .bg-danger {
        background: #dc3545;
        color: white;
      }

      .device-breakdown {
        display: flex;
        flex-direction: column;
        gap: 5px;
        font-size: 0.9rem;
        color: #6c757d;
      }

      .device-actions {
        display: flex;
        gap: 8px;
        margin-top: 15px;
      }

      .device-actions .btn {
        flex: 1;
        font-size: 0.8rem;
        padding: 6px 12px;
      }

      .testing-interface {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
      }

      .testing-mode h3 {
        color: #495057;
        margin-bottom: 15px;
      }

      .group-progress {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
      }

      .progress-bar {
        display: flex;
        align-items: center;
        gap: 10px;
        margin: 10px 0;
      }

      .progress {
        flex: 1;
        height: 20px;
        background: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
        transition: width 0.3s ease;
      }

      .progress-text {
        font-weight: 600;
        min-width: 80px;
      }

      .time-info {
        color: #6c757d;
        font-size: 0.9rem;
      }

      .current-device, .group-summary {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
      }

      .device-test-card {
        background: #f8f9fa;
        border-radius: 6px;
        padding: 15px;
      }

      .summary-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
      }

      .stat {
        display: flex;
        justify-content: space-between;
        padding: 8px;
        background: #f8f9fa;
        border-radius: 4px;
      }

      .stat.success { border-left: 4px solid #28a745; }
      .stat.warning { border-left: 4px solid #ffc107; }
      .stat.error { border-left: 4px solid #dc3545; }

      .test-controls {
        display: flex;
        gap: 10px;
        justify-content: center;
      }

      .reports-interface {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }

      .report-filters {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
      }

      .report-filters > * {
        flex: 1;
        min-width: 150px;
      }

      .report-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        margin-bottom: 10px;
      }

      .report-actions {
        display: flex;
        gap: 8px;
      }

      .debug-interface {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
      }

      .debug-actions {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
      }

      .debug-output {
        background: #2d3748;
        color: #e2e8f0;
        padding: 15px;
        border-radius: 6px;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        max-height: 400px;
        overflow-y: auto;
      }

      @media (max-width: 768px) {
        .search-filters {
          flex-direction: column;
        }
        
        .device-results {
          grid-template-columns: 1fr;
        }
        
        .test-controls {
          flex-direction: column;
        }
        
        .report-filters {
          flex-direction: column;
        }
      }
    `;
    document.head.appendChild(style);
  }

  private setupEventListeners(container: HTMLElement): void {
    // Tab switching
    const tabBtns = container.querySelectorAll('.tab-btn');
    tabBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        const tabName = (e.target as HTMLElement).getAttribute('data-tab');
        if (tabName) {
          this.switchTab(tabName);
        }
      });
    });

    // ConnectID initialization
    const initConnectIDBtn = container.querySelector('#init-connectid');
    initConnectIDBtn?.addEventListener('click', () => {
      this.initializeOperatorIdentification();
    });

    // Device search
    const searchDevicesBtn = container.querySelector('#search-devices');
    searchDevicesBtn?.addEventListener('click', () => {
      this.searchDevices();
    });

    // Test controls
    const pauseBtn = container.querySelector('#pause-test');
    pauseBtn?.addEventListener('click', () => {
      this.module.getService().pauseResumeTest();
    });

    const stopBtn = container.querySelector('#stop-test');
    stopBtn?.addEventListener('click', () => {
      this.module.getService().stopTest();
    });

    // Report generation
    const generateReportBtn = container.querySelector('#generate-report');
    generateReportBtn?.addEventListener('click', () => {
      this.generateReport();
    });

    // Debug actions
    const debugTestDeviceBtn = container.querySelector('#debug-test-device');
    debugTestDeviceBtn?.addEventListener('click', () => {
      this.debugTestDevice();
    });

    const debugStopAllBtn = container.querySelector('#debug-stop-all');
    debugStopAllBtn?.addEventListener('click', () => {
      this.debugStopAll();
    });

    const debugClearBtn = container.querySelector('#debug-clear-log');
    debugClearBtn?.addEventListener('click', () => {
      this.debugClearLog();
    });

    // Service event listeners
    this.setupServiceEventListeners();
  }

  private setupServiceEventListeners(): void {
    window.addEventListener('connecttest:test-started', (e: any) => {
      this.updateSingleTestDisplay(e.detail.device);
      this.showTestControls(true);
    });

    window.addEventListener('connecttest:progress-update', (e: any) => {
      this.updateTestProgress(e.detail.device);
    });

    window.addEventListener('connecttest:test-completed', (e: any) => {
      this.handleTestCompleted(e.detail.device);
      this.showTestControls(false);
    });
  }

  private switchTab(tabName: string): void {
    this.currentTab = tabName;
    
    // Update tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`)?.classList.add('active');

    // Update tab content
    document.querySelectorAll('.section').forEach(section => {
      section.classList.remove('active');
    });
    document.getElementById(`${tabName}-tab`)?.classList.add('active');

    // Load tab-specific data
    this.loadTabData(tabName);
  }

  private loadTabData(tabName: string): void {
    // Store current tab for later use
    this.currentTab = tabName;
    
    switch (tabName) {
      case 'device-selection':
        this.loadDevices();
        break;
      case 'testing':
        this.updateTestingTab();
        break;
      case 'reports':
        this.loadReports();
        break;
    }
  }

  private async loadInitialData(): Promise<void> {
    // Load initial data
    console.log('ConnectTest initialized - ready for device testing');
  }

  private initializeOperatorIdentification(): void {
    // Simulate operator identification
    setTimeout(() => {
      const promptDiv = document.querySelector('.identification-prompt');
      const infoDiv = document.getElementById('operator-info');
      
      if (promptDiv) (promptDiv as HTMLElement).style.display = 'none';
      if (infoDiv) (infoDiv as HTMLElement).style.display = 'block';
      
      console.log('👤 Operator identified successfully');
    }, 1000);
  }

  private async searchDevices(): Promise<void> {
    const query = (document.getElementById('device-search-input') as HTMLInputElement)?.value || '';
    const typeFilter = (document.getElementById('device-type-filter') as HTMLSelectElement)?.value || '';
    const statusFilter = (document.getElementById('device-status-filter') as HTMLSelectElement)?.value || '';
    
    const service = this.module.getService();
    const devices = await service.searchDevices(query, {
      type: typeFilter,
      status: statusFilter
    });
    
    this.displayDevices(devices);
  }

  private async loadDevices(): Promise<void> {
    const service = this.module.getService();
    const devices = await service.searchDevices('');
    this.displayDevices(devices);
  }

  private displayDevices(devices: TestDevice[]): void {
    const container = document.getElementById('device-results');
    if (!container) return;

    container.innerHTML = devices.map(device => `
      <div class="device-card" data-device-id="${device.id}">
        <div class="device-header">
          <span class="device-id">📱 ${device.serialNumber}</span>
          <span class="badge ${this.getStatusBadgeClass(device.status)}">${this.getStatusText(device.status)}</span>
        </div>
        <div class="device-details">
          <p><strong>Typ:</strong> ${device.type}</p>
          <p><strong>Status:</strong> ${this.getStatusText(device.status)}</p>
          ${device.progress ? `<p><strong>Postęp:</strong> ${device.progress}%</p>` : ''}
        </div>
        <div class="device-actions">
          <button class="btn btn-success btn-sm" onclick="window.connectTestView.startDeviceTest('${device.id}')">🧪 Testuj</button>
          <button class="btn btn-info btn-sm" onclick="window.connectTestView.viewDeviceDetails('${device.id}')">👁️ Szczegóły</button>
        </div>
      </div>
    `).join('');
  }

  private showTestControls(show: boolean): void {
    const pauseBtn = document.getElementById('pause-test');
    const stopBtn = document.getElementById('stop-test');
    
    if (pauseBtn) (pauseBtn as HTMLElement).style.display = show ? 'inline-block' : 'none';
    if (stopBtn) (stopBtn as HTMLElement).style.display = show ? 'inline-block' : 'none';
  }

  private updateTestingTab(): void {
    const service = this.module.getService();
    const currentTest = service.getCurrentTest();
    
    if (currentTest) {
      this.updateSingleTestDisplay(currentTest);
      this.showTestControls(true);
    } else {
      this.showTestControls(false);
    }
  }

  private updateSingleTestDisplay(device: TestDevice): void {
    const container = document.getElementById('single-device-info');
    if (!container) return;

    container.innerHTML = `
      <div class="device-test-card">
        <div class="device-header">
          <span class="device-id">📱 ${device.serialNumber}</span>
          <span class="badge ${this.getStatusBadgeClass(device.status)}">${this.getStatusText(device.status)}</span>
        </div>
        <div class="test-progress">
          <div class="progress-bar">
            <div class="progress">
              <div class="progress-fill" style="width: ${device.progress || 0}%"></div>
            </div>
            <span class="progress-text">${device.progress || 0}%</span>
          </div>
          ${device.results ? this.renderTestSteps(device.results.steps) : ''}
        </div>
      </div>
    `;
  }



  private updateTestProgress(device: TestDevice): void {
    if (!device) {
      console.warn('updateTestProgress called with null device');
      return;
    }
    
    // Update progress displays
    const progressBars = document.querySelectorAll('.progress-fill');
    progressBars.forEach(bar => {
      (bar as HTMLElement).style.width = `${device.progress || 0}%`;
    });
    
    const progressTexts = document.querySelectorAll('.progress-text');
    progressTexts.forEach(text => {
      text.textContent = `${device.progress || 0}%`;
    });
  }

  private handleTestCompleted(device: TestDevice): void {
    if (!device) {
      console.warn('handleTestCompleted called with null device');
      return;
    }
    
    console.log(`✅ Test completed for device ${device.serialNumber}: ${device.status}`);
    
    // Update displays
    this.updateTestingTab();
  }

  private renderTestSteps(steps: any[]): string {
    return `
      <div class="test-steps">
        ${steps.map(step => `
          <div class="test-step ${step.status}">
            <span class="step-name">${step.name}</span>
            <span class="step-progress">${step.progress}%</span>
          </div>
        `).join('')}
      </div>
    `;
  }

  private loadReports(): void {
    // Load recent reports
    console.log('📋 Loading reports...');
  }

  private async generateReport(): Promise<void> {
    const reportType = (document.getElementById('report-type') as HTMLSelectElement)?.value as 'device' | 'summary' | 'history';
    const dateFrom = (document.getElementById('report-date-from') as HTMLInputElement)?.value;
    const dateTo = (document.getElementById('report-date-to') as HTMLInputElement)?.value;
    const deviceFilter = (document.getElementById('report-device-filter') as HTMLSelectElement)?.value;
    
    console.log('📊 Generating device report...', { reportType, dateFrom, dateTo, deviceFilter });
    this.debugLog(`Generating ${reportType} report for devices`);
    
    const service = this.module.getService();
    const report = await service.generateReport(reportType, { dateFrom, dateTo, deviceFilter });
    
    console.log('✅ Device report generated:', report);
    this.debugLog(`Report generated: ${report.type} with ${Array.isArray(report.data) ? report.data.length : 1} items`);
  }

  // Public methods for onclick handlers
  public async startDeviceTest(deviceId: string): Promise<void> {
    const testType = this.getSelectedTestType();
    console.log(`🧪 Starting device test: ${deviceId} with ${testType}`);
    
    try {
      await this.module.getService().startDeviceTest(deviceId, testType);
      this.switchTab('testing');
    } catch (error) {
      console.error('Failed to start device test:', error);
    }
  }

  public viewDeviceDetails(deviceId: string): void {
    console.log(`👁️ Viewing device details: ${deviceId}`);
    this.debugLog(`Viewing details for device: ${deviceId}`);
  }

  // Debug methods
  private debugTestDevice(): void {
    this.debugLog('Starting debug device test...');
    this.startDeviceTest('device-1');
  }

  private debugStopAll(): void {
    this.debugLog('Stopping all tests...');
    this.module.getService().stopTest();
  }

  private debugClearLog(): void {
    const debugOutput = document.getElementById('debug-result');
    if (debugOutput) {
      debugOutput.innerHTML = '<p>Debug console cleared - device test actions will appear here</p>';
    }
  }

  private debugLog(message: string): void {
    const debugOutput = document.getElementById('debug-result');
    if (debugOutput) {
      const timestamp = new Date().toLocaleTimeString();
      debugOutput.innerHTML += `<div>[${timestamp}] [${this.currentTab}] ${message}</div>`;
      debugOutput.scrollTop = debugOutput.scrollHeight;
    }
  }

  // Helper methods
  private getSelectedTestType(): string {
    const selected = document.querySelector('input[name="test-type"]:checked') as HTMLInputElement;
    return selected?.value || 'function';
  }


  private getStatusBadgeClass(status: string): string {
    const classes = {
      'pending': 'bg-secondary',
      'in-progress': 'bg-primary',
      'completed': 'bg-success',
      'failed': 'bg-danger',
      'warning': 'bg-warning'
    };
    return classes[status as keyof typeof classes] || 'bg-secondary';
  }

  private getStatusText(status: string): string {
    const texts = {
      'pending': 'Oczekujące',
      'in-progress': 'W trakcie',
      'completed': 'Ukończone',
      'failed': 'Nieudane',
      'warning': 'Ostrzeżenie'
    };
    return texts[status as keyof typeof texts] || status;
  }


}
