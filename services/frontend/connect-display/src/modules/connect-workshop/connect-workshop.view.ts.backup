import { ConnectWorkshopModule } from './connect-workshop.module';

export class ConnectWorkshopView {
  private module: ConnectWorkshopModule;
  private currentTab: string = 'requests';

  constructor(module: ConnectWorkshopModule) {
    this.module = module;
  }

  render(): HTMLElement {
    const container = document.createElement('div');
    container.className = 'connect-workshop-page';
    
    container.innerHTML = `
      <div class="connect-workshop-container">
        <div class="header-section">
          <h1>🔧 ConnectWorkshop - Workshop Client</h1>
          <div class="header-actions">
            <button id="force-sync" class="btn btn-success">🔄 Force Sync</button>
            <button id="create-request" class="btn btn-primary">➕ New Request</button>
          </div>
        </div>

        <div class="sync-status">
          <div class="status-indicator" id="sync-indicator">
            <span class="dot"></span>
            <span id="sync-text">Connected</span>
          </div>
          <span id="last-sync">Last sync: now</span>
        </div>

        <div class="main-content">
          <!-- Tab Navigation -->
          <div class="tab-navigation">
            <button class="tab-btn active" data-tab="requests">📋 Requests</button>
            <button class="tab-btn" data-tab="transport">🚚 Transport</button>
            <button class="tab-btn" data-tab="dispositions">📦 Dispositions</button>
            <button class="tab-btn" data-tab="service">⚙️ Service</button>
          </div>

          <!-- Requests Tab -->
          <div id="requests-tab" class="tab-content active">
            <div class="requests-section">
              <div class="section-header">
                <h3>📋 Workshop Requests</h3>
                <div class="filters">
                  <select id="status-filter" class="form-select">
                    <option value="">All Status</option>
                    <option value="pending">⏳ Pending</option>
                    <option value="processing">⚙️ Processing</option>
                    <option value="completed">✅ Completed</option>
                    <option value="cancelled">❌ Cancelled</option>
                  </select>
                  <input type="text" id="search-requests" class="form-control" placeholder="Search requests...">
                </div>
              </div>
              
              <div class="requests-table">
                <table class="table">
                  <thead>
                    <tr>
                      <th>ID</th>
                      <th>Device</th>
                      <th>Type</th>
                      <th>Priority</th>
                      <th>Status</th>
                      <th>Created</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="requests-tbody">
                    <!-- Content populated by JS -->
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <!-- Transport Tab -->
          <div id="transport-tab" class="tab-content">
            <div class="transport-section">
              <div class="section-header">
                <h3>🚚 Transport Lists</h3>
                <button id="create-transport" class="btn btn-outline-primary">➕ New Transport</button>
              </div>
              
              <div class="transport-cards" id="transport-cards">
                <!-- Transport cards populated by JS -->
              </div>
            </div>
          </div>

          <!-- Dispositions Tab -->
          <div id="dispositions-tab" class="tab-content">
            <div class="dispositions-section">
              <div class="section-header">
                <h3>📦 Dispositions</h3>
                <button id="create-disposition" class="btn btn-outline-primary">➕ New Disposition</button>
              </div>
              
              <div class="dispositions-grid" id="dispositions-grid">
                <!-- Dispositions populated by JS -->
              </div>
            </div>
          </div>

          <!-- Service Tab -->
          <div id="service-tab" class="tab-content">
            <div class="service-section">
              <div class="section-header">
                <h3>⚙️ Service Management</h3>
              </div>
              
              <div class="service-stats">
                <div class="stat-card">
                  <h4>Active Requests</h4>
                  <span class="stat-number" id="active-requests">0</span>
                </div>
                <div class="stat-card">
                  <h4>Transport Lists</h4>
                  <span class="stat-number" id="transport-count">0</span>
                </div>
                <div class="stat-card">
                  <h4>Sync Status</h4>
                  <span class="stat-number" id="sync-status">Active</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Create Request Modal -->
        <div id="request-modal" class="modal">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5>➕ Create Workshop Request</h5>
                <button type="button" class="btn-close">&times;</button>
              </div>
              <div class="modal-body">
                <form id="request-form">
                  <div class="form-group">
                    <label>Device Serial:</label>
                    <input type="text" id="device-serial" class="form-control" required>
                  </div>
                  <div class="form-group">
                    <label>Request Type:</label>
                    <select id="request-type" class="form-select" required>
                      <option value="">Select type...</option>
                      <option value="maintenance">🔧 Maintenance</option>
                      <option value="repair">🛠️ Repair</option>
                      <option value="testing">🧪 Testing</option>
                      <option value="calibration">📏 Calibration</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label>Priority:</label>
                    <select id="request-priority" class="form-select" required>
                      <option value="low">🟢 Low</option>
                      <option value="medium" selected>🟡 Medium</option>
                      <option value="high">🟠 High</option>
                      <option value="urgent">🔴 Urgent</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label>Description:</label>
                    <textarea id="request-description" class="form-control" rows="3"></textarea>
                  </div>
                </form>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" id="save-request" class="btn btn-primary">💾 Create Request</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Transport Modal -->
        <div id="transport-modal" class="modal">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5>🚚 Create Transport List</h5>
                <button type="button" class="btn-close">&times;</button>
              </div>
              <div class="modal-body">
                <div class="form-group">
                  <label for="transport-name">Transport List Name:</label>
                  <input type="text" id="transport-name" class="form-control" placeholder="e.g., Transport List - Week 42">
                </div>
                <div class="form-group">
                  <label for="transport-destination">Destination:</label>
                  <input type="text" id="transport-destination" class="form-control" placeholder="e.g., Laboratory Building A">
                </div>
                <div class="form-group">
                  <label for="transport-items">Items (comma separated):</label>
                  <textarea id="transport-items" class="form-control" rows="3" placeholder="G1-001234, G1-001235, G2-001100"></textarea>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" id="save-transport" class="btn btn-primary">🚚 Create Transport</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Disposition Modal -->
        <div id="disposition-modal" class="modal">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5>📦 Create Disposition</h5>
                <button type="button" class="btn-close">&times;</button>
              </div>
              <div class="modal-body">
                <div class="form-group">
                  <label for="disposition-title">Title:</label>
                  <input type="text" id="disposition-title" class="form-control" placeholder="e.g., Equipment Return">
                </div>
                <div class="form-group">
                  <label for="disposition-type">Type:</label>
                  <select id="disposition-type" class="form-select">
                    <option value="return">📦 Return</option>
                    <option value="disposal">🗑️ Disposal</option>
                    <option value="transfer">🔄 Transfer</option>
                    <option value="maintenance">🔧 Maintenance</option>
                  </select>
                </div>
                <div class="form-group">
                  <label for="disposition-description">Description:</label>
                  <textarea id="disposition-description" class="form-control" rows="3" placeholder="Enter disposition details..."></textarea>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" id="save-disposition" class="btn btn-primary">📦 Create Disposition</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Confirm Delete Modal -->
        <div id="confirm-modal" class="modal">
          <div class="modal-dialog modal-sm">
            <div class="modal-content">
              <div class="modal-header">
                <h5>⚠️ Confirm Action</h5>
                <button type="button" class="btn-close">&times;</button>
              </div>
              <div class="modal-body">
                <p id="confirm-message">Are you sure?</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" id="confirm-yes" class="btn btn-danger">Yes, Delete</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Success/Info Modal -->
        <div id="info-modal" class="modal">
          <div class="modal-dialog modal-sm">
            <div class="modal-content">
              <div class="modal-header">
                <h5 id="info-title">ℹ️ Information</h5>
                <button type="button" class="btn-close">&times;</button>
              </div>
              <div class="modal-body">
                <p id="info-message">Action completed</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    this.addStyles();
    this.setupEventListeners(container);
    this.loadInitialData();

    // Make methods globally accessible for onclick handlers
    (window as any).workshopView = this;

    return container;
  }

  private addStyles(): void {
    const style = document.createElement('style');
    style.textContent = `
      .connect-workshop-page {
        padding: 20px;
        max-width: 1400px;
        margin: 0 auto;
      }

      .connect-workshop-container {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }

      .header-section {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .sync-status {
        background: #f8f9fa;
        padding: 10px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #dee2e6;
      }

      .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #28a745;
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
      }

      .tab-navigation {
        display: flex;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
      }

      .tab-btn {
        padding: 15px 20px;
        border: none;
        background: none;
        cursor: pointer;
        border-bottom: 3px solid transparent;
        transition: all 0.2s;
      }

      .tab-btn.active {
        background: white;
        border-bottom-color: #28a745;
        color: #28a745;
        font-weight: 600;
      }

      .tab-content {
        display: none;
        padding: 20px;
      }

      .tab-content.active {
        display: block;
      }

      .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #dee2e6;
      }

      .filters {
        display: flex;
        gap: 10px;
      }

      .form-control, .form-select {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
      }

      .table {
        width: 100%;
        border-collapse: collapse;
      }

      .table th, .table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
      }

      .table th {
        background: #f8f9fa;
        font-weight: 600;
      }

      .transport-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
      }

      .transport-card {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        border-left: 4px solid #28a745;
      }

      .dispositions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 15px;
      }

      .disposition-item {
        background: #fff;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 12px;
      }

      .service-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
      }

      .stat-card {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        border-left: 4px solid #28a745;
      }

      .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #28a745;
        display: block;
      }

      .btn {
        padding: 8px 16px;
        border: 1px solid transparent;
        border-radius: 4px;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
        transition: all 0.2s;
      }

      .btn-primary {
        background: #007bff;
        color: white;
        border-color: #007bff;
      }

      .btn-success {
        background: #28a745;
        color: white;
        border-color: #28a745;
      }

      .btn-outline-primary {
        color: #007bff;
        border-color: #007bff;
        background: transparent;
      }

      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        align-items: center;
        justify-content: center;
      }

      .modal.show {
        display: flex;
      }

      .modal-dialog {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
      }

      .modal-dialog.modal-sm {
        max-width: 400px;
      }

      .modal-header, .modal-body, .modal-footer {
        padding: 15px 20px;
      }

      .modal-header {
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .modal-footer {
        border-top: 1px solid #dee2e6;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
      }

      .btn-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
      }
    `;
    document.head.appendChild(style);
  }

  private setupEventListeners(container: HTMLElement): void {
    // Tab switching
    const tabBtns = container.querySelectorAll('.tab-btn');
    tabBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        const tabName = (e.target as HTMLElement).getAttribute('data-tab');
        if (tabName) {
          this.switchTab(tabName);
        }
      });
    });

    // Force sync
    const syncBtn = container.querySelector('#force-sync');
    syncBtn?.addEventListener('click', () => {
      this.forceSync();
    });

    // Create request
    const createBtn = container.querySelector('#create-request');
    const modal = container.querySelector('#request-modal');
    const closeBtn = container.querySelector('.btn-close');
    const saveBtn = container.querySelector('#save-request');

    createBtn?.addEventListener('click', () => {
      modal?.classList.add('show');
    });

    closeBtn?.addEventListener('click', () => {
      modal?.classList.remove('show');
    });

    saveBtn?.addEventListener('click', () => {
      this.saveRequest();
    });

    // Search and filters
    const searchInput = container.querySelector('#search-requests');
    const statusFilter = container.querySelector('#status-filter');

    searchInput?.addEventListener('input', () => {
      this.filterRequests();
    });

    statusFilter?.addEventListener('change', () => {
      this.filterRequests();
    });

    // Create transport
    const createTransportBtn = container.querySelector('#create-transport');
    createTransportBtn?.addEventListener('click', () => {
      this.showTransportModal();
    });

    // Create disposition
    const createDispositionBtn = container.querySelector('#create-disposition');
    createDispositionBtn?.addEventListener('click', () => {
      this.showDispositionModal();
    });

    // Modal event listeners
    this.setupModalListeners(container);
  }

  private switchTab(tabName: string): void {
    this.currentTab = tabName;
    
    // Update tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`)?.classList.add('active');

    // Update tab content
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.remove('active');
    });
    document.getElementById(`${tabName}-tab`)?.classList.add('active');

    // Load tab-specific data
    this.loadTabData(tabName);
  }

  private async loadTabData(tabName: string): Promise<void> {
    switch (tabName) {
      case 'requests':
        this.loadRequests();
        break;
      case 'transport':
        this.loadTransportLists();
        break;
      case 'dispositions':
        this.loadDispositions();
        break;
      case 'service':
        this.updateServiceStats();
        break;
    }
  }

  private async loadInitialData(): Promise<void> {
    await this.loadTabData('requests');
    this.updateSyncStatus();
  }

  private loadRequests(): void {
    const service = this.module.getService();
    const requests = service.getWorkshopRequests();
    
    const tbody = document.getElementById('requests-tbody');
    if (tbody) {
      tbody.innerHTML = requests.map((req: any) => `
        <tr>
          <td>${req.id}</td>
          <td>${req.deviceSerial}</td>
          <td>${req.type}</td>
          <td><span class="priority-${req.priority}">${req.priority}</span></td>
          <td><span class="status-${req.status}">${req.status}</span></td>
          <td>${new Date(req.createdAt).toLocaleDateString()}</td>
          <td>
            <button class="btn btn-sm btn-outline-primary" onclick="window.workshopView.editRequest('${req.id}')">✏️</button>
            <button class="btn btn-sm btn-outline-danger" onclick="window.workshopView.deleteRequest('${req.id}')">🗑️</button>
          </td>
        </tr>
      `).join('');
    }
  }

  private loadTransportLists(): void {
    const service = this.module.getService();
    const transportLists = service.getTransportLists();
    
    const container = document.getElementById('transport-cards');
    if (container) {
      container.innerHTML = transportLists.map(transport => `
        <div class="transport-card">
          <h4>${transport.name}</h4>
          <p>Items: ${transport.items.length}</p>
          <p>Status: ${transport.status}</p>
          <p>Created: ${new Date(transport.createdAt).toLocaleDateString()}</p>
        </div>
      `).join('');
    }
  }

  private loadDispositions(): void {
    const container = document.getElementById('dispositions-grid');
    if (container) {
      container.innerHTML = `
        <div class="disposition-item">
          <h5>Sample Disposition</h5>
          <p>Status: Pending</p>
        </div>
      `;
    }
  }

  private updateServiceStats(): void {
    const service = this.module.getService();
    const stats = service.getStatistics();
    
    const activeEl = document.getElementById('active-requests');
    const transportEl = document.getElementById('transport-count');
    const syncEl = document.getElementById('sync-status');
    
    if (activeEl) activeEl.textContent = stats.activeRequests.toString();
    if (transportEl) transportEl.textContent = stats.transportLists.toString();
    if (syncEl) syncEl.textContent = stats.connected ? 'Active' : 'Disconnected';
  }

  private async forceSync(): Promise<void> {
    const service = this.module.getService();
    await service.forceSync();
    this.updateSyncStatus();
    this.loadTabData(this.currentTab);
  }

  private updateSyncStatus(): void {
    const syncText = document.getElementById('sync-text');
    const lastSync = document.getElementById('last-sync');
    
    if (syncText) syncText.textContent = 'Connected';
    if (lastSync) lastSync.textContent = `Last sync: ${new Date().toLocaleTimeString()}`;
  }

  private saveRequest(): void {
    const deviceSerial = (document.getElementById('device-serial') as HTMLInputElement)?.value;
    const requestType = (document.getElementById('request-type') as HTMLSelectElement)?.value;
    const priority = (document.getElementById('request-priority') as HTMLSelectElement)?.value;
    const description = (document.getElementById('request-description') as HTMLTextAreaElement)?.value;
    
    if (!deviceSerial || !requestType || !priority) {
      this.showInfoModal('⚠️ Validation Error', 'Please fill in all required fields');
      return;
    }
    
    const requestData = {
      deviceSerial,
      type: requestType,
      priority,
      description,
      status: 'pending',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    console.log('💾 Saving request:', requestData);
    
    const modal = document.getElementById('request-modal');
    modal?.classList.remove('show');
    
    this.showInfoModal('✅ Success', `Request created successfully: ${deviceSerial}`);
    
    // Clear form
    (document.getElementById('device-serial') as HTMLInputElement).value = '';
    (document.getElementById('request-type') as HTMLSelectElement).value = '';
    (document.getElementById('request-priority') as HTMLSelectElement).value = 'medium';
    (document.getElementById('request-description') as HTMLTextAreaElement).value = '';
    
    this.loadRequests();
  }

  private setupModalListeners(container: HTMLElement): void {
    // Generic modal close buttons
    const closeBtns = container.querySelectorAll('.btn-close, [data-dismiss="modal"]');
    closeBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        const modal = (e.target as HTMLElement).closest('.modal');
        modal?.classList.remove('show');
      });
    });

    // Transport modal save
    const saveTransportBtn = container.querySelector('#save-transport');
    saveTransportBtn?.addEventListener('click', () => {
      this.saveTransport();
    });

    // Disposition modal save
    const saveDispositionBtn = container.querySelector('#save-disposition');
    saveDispositionBtn?.addEventListener('click', () => {
      this.saveDisposition();
    });

    // Confirm modal
    const confirmYesBtn = container.querySelector('#confirm-yes');
    confirmYesBtn?.addEventListener('click', () => {
      const modal = container.querySelector('#confirm-modal');
      modal?.classList.remove('show');
      
      // Execute the stored callback
      if ((window as any).confirmCallback) {
        (window as any).confirmCallback();
        (window as any).confirmCallback = null;
      }
    });
  }

  private filterRequests(): void {
    console.log('🔍 Filtering requests...');
    this.loadRequests();
  }

  private showTransportModal(): void {
    const modal = document.getElementById('transport-modal');
    modal?.classList.add('show');
    
    // Clear form
    (document.getElementById('transport-name') as HTMLInputElement).value = '';
    (document.getElementById('transport-destination') as HTMLInputElement).value = '';
    (document.getElementById('transport-items') as HTMLTextAreaElement).value = '';
  }

  private saveTransport(): void {
    const name = (document.getElementById('transport-name') as HTMLInputElement)?.value;
    const destination = (document.getElementById('transport-destination') as HTMLInputElement)?.value;
    const items = (document.getElementById('transport-items') as HTMLTextAreaElement)?.value;
    
    if (!name) {
      this.showInfoModal('⚠️ Validation Error', 'Please enter a transport list name');
      return;
    }
    
    console.log('🚚 Creating transport list:', { name, destination, items });
    
    const modal = document.getElementById('transport-modal');
    modal?.classList.remove('show');
    
    this.showInfoModal('✅ Success', `Transport list "${name}" created successfully`);
    this.loadTransportLists();
  }

  private showDispositionModal(): void {
    const modal = document.getElementById('disposition-modal');
    modal?.classList.add('show');
    
    // Clear form
    (document.getElementById('disposition-title') as HTMLInputElement).value = '';
    (document.getElementById('disposition-type') as HTMLSelectElement).value = 'return';
    (document.getElementById('disposition-description') as HTMLTextAreaElement).value = '';
  }

  private saveDisposition(): void {
    const title = (document.getElementById('disposition-title') as HTMLInputElement)?.value;
    const type = (document.getElementById('disposition-type') as HTMLSelectElement)?.value;
    const description = (document.getElementById('disposition-description') as HTMLTextAreaElement)?.value;
    
    if (!title) {
      this.showInfoModal('⚠️ Validation Error', 'Please enter a disposition title');
      return;
    }
    
    console.log('📦 Creating disposition:', { title, type, description });
    
    const modal = document.getElementById('disposition-modal');
    modal?.classList.remove('show');
    
    this.showInfoModal('✅ Success', `Disposition "${title}" created successfully`);
    this.loadDispositions();
  }

  private showConfirmModal(message: string, callback: () => void): void {
    const modal = document.getElementById('confirm-modal');
    const messageEl = document.getElementById('confirm-message');
    
    if (messageEl) messageEl.textContent = message;
    modal?.classList.add('show');
    
    // Store callback for confirm button
    (window as any).confirmCallback = callback;
  }

  private showInfoModal(title: string, message: string): void {
    const modal = document.getElementById('info-modal');
    const titleEl = document.getElementById('info-title');
    const messageEl = document.getElementById('info-message');
    
    if (titleEl) titleEl.textContent = title;
    if (messageEl) messageEl.textContent = message;
    modal?.classList.add('show');
  }

  public editRequest(id: string): void {
    console.log('✏️ Editing request:', id);
    this.showInfoModal('ℹ️ Edit Request', `Edit functionality for request: ${id}`);
  }

  public deleteRequest(id: string): void {
    this.showConfirmModal(
      `Are you sure you want to delete request ${id}?`,
      () => {
        console.log('🗑️ Deleting request:', id);
        this.showInfoModal('✅ Success', `Request ${id} deleted successfully`);
        this.loadRequests();
      }
    );
  }
}
