// frontend/src/main.ts

import { 
  createElement, 
  replaceContent, 
  createErrorContainer, 
  createLoadingContainer,
  createMainAppStructure,
  createButton
} from './utils/dom.helpers';
import './config/env.config'; // Validate environment on startup
import './config/service.manifest'; // Validate service manifest
import { moduleManager } from './modules';
import { MenuManager, createMenu } from './components/connect-menu';
import './styles/old-modules.css'; // Styles for old module loaders

// Add basic CSS for 1280√ó400px touchscreen
const style = document.createElement('style');
style.textContent = `
  * {
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #000;
  }

  .main-app-container {
    display: flex;
    flex-direction: column;
    background: #1a1a1a;
    width: 1200px;  /* default: fixed mode */
    height: 400px;
    --app-height: 400px;
  }

  /* Size modes */
  body.fixed-1200 {
    overflow: hidden;
  }
  body.fixed-1200 .main-app-container {
    width: 1200px;
    height: 400px;
    --app-height: 400px;
  }
  body.responsive-100 {
    overflow: hidden;
  }
  body.responsive-100 .main-app-container {
    width: 100vw;
    height: 100vh;
    --app-height: 100vh;
  }

  .top-bar {
    height: 35px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
    flex-shrink: 0;
  }

  .top-bar-brand {
    font-size: 14px;
    font-weight: 600;
  }

  .top-bar-submenu {
    margin-left: 20px;
    font-size: 13px;
    font-weight: 500;
    opacity: 0.9;
  }

  .top-bar-section-title {
    flex: 1;
    margin-left: 15px;
    font-size: 12px;
    font-weight: 600;
    opacity: 0.95;
  }

  .top-bar-status {
    display: flex;
    gap: 12px;
    font-size: 11px;
  }

  .btn-toggle-size {
    padding: 4px 8px;
    background: rgba(255,255,255,0.15);
    color: #fff;
    border: 1px solid rgba(255,255,255,0.25);
    border-radius: 4px;
    font-size: 11px;
    cursor: pointer;
  }
  .btn-toggle-size:hover {
    background: rgba(255,255,255,0.25);
  }

  .app-layout {
    display: flex;
    height: calc(var(--app-height, 400px) - 35px);
    overflow: hidden;
  }

  /* Sidebar navigation styles moved to connect-menu component */

  .module-container {
    flex: 1;
    background: #f5f5f5;
    overflow-y: auto;
    overflow-x: hidden;
  }

  .loading {
    text-align: center;
    padding: 40px;
    color: #666;
    font-size: 14px;
  }

  .error {
    background: #fee;
    border: 1px solid #fcc;
    padding: 12px;
    margin: 10px;
    border-radius: 5px;
    color: #c33;
    font-size: 12px;
  }

  /* Professional Loading States */
  .loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 300px;
    text-align: center;
    padding: 40px;
  }

  .loading-spinner {
    margin-bottom: 20px;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #6366f1;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-text h3 {
    margin: 0 0 8px 0;
    font-size: 13px;
    color: #333;
    font-weight: 600;
  }

  .loading-text p {
    margin: 0;
    font-size: 14px;
    color: #666;
  }

  .loading-progress {
    width: 200px;
    margin-top: 20px;
  }

  .progress-bar {
    width: 100%;
    height: 4px;
    background: #e0e0e0;
    border-radius: 2px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #6366f1, #8b5cf6);
    width: 0%;
    transition: width 0.8s ease-out;
  }

  /* Professional Error States */
  .error-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 300px;
    text-align: center;
    padding: 40px;
  }

  .error-icon {
    font-size: 48px;
    margin-bottom: 20px;
  }

  .error-content h3 {
    margin: 0 0 12px 0;
    font-size: 20px;
    color: #dc3545;
    font-weight: 600;
  }

  .error-message {
    margin: 0 0 20px 0;
    font-size: 14px;
    color: #666;
    max-width: 400px;
  }

  .error-actions {
    display: flex;
    gap: 12px;
  }

  .btn-retry, .btn-home {
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .btn-retry {
    background: #6366f1;
    color: white;
  }

  .btn-retry:hover {
    background: #5856eb;
  }

  .btn-home {
    background: #6c757d;
    color: white;
  }

  .btn-home:hover {
    background: #5a6268;
  }

  /* Scrollbar styling */
  .module-container::-webkit-scrollbar {
    width: 6px;
  }

  .module-container::-webkit-scrollbar-track {
    background: #e0e0e0;
  }

  .module-container::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
  }

  .module-container::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
  
  /* Hide in-content page titles; use top bar instead */
  .module-main-content .page-header h2,
  .module-main-content .page-header h3 {
    display: none;
  }
  
  /* Icon styles - simplified emoji system */
  .icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;
    flex-shrink: 0;
  }
`;
document.head.appendChild(style);

// Track current module to prevent unnecessary re-renders
let currentModuleState = {
  moduleName: '',
  moduleType: '',
  method: ''
};

async function initializeApp() {
  try {
    
    // Initialize all modules
    await moduleManager.initializeAll();
    
    // Create main application with navigation
    createMainApplication();
    
    
  } catch (error) {
    console.error('‚ùå Failed to initialize application:', error);
    showErrorUI(error instanceof Error ? error : String(error));
  }
}

function createMainApplication(): void {
  const app = document.getElementById('app') || document.body;
  
  const mainContainer = createMainAppStructure();
  
  mainContainer.innerHTML = `
    <div class="top-bar">
      <div class="top-bar-brand">üöÄ ConnectDisplay</div>
      <div class="top-bar-submenu" id="top-bar-submenu"></div>
      <div class="top-bar-section-title" id="top-bar-section-title"></div>
      <div class="top-bar-status">
        <span>üìä <span id="module-count">6</span></span>
        <span>‚úÖ</span>
        <span>üïí <span id="load-time">${new Date().toLocaleTimeString()}</span></span>
        <button id="toggle-size-btn" class="btn-toggle-size" title="Prze≈ÇƒÖcz widok">1200√ó400</button>
      </div>
    </div>
    
    <div class="app-layout">
      <div id="main-navigation-container">
        <!-- Main navigation menu will be rendered here by MenuManager -->
      </div>
      
      <div class="module-container" id="module-container">
        <!-- Module content will be rendered here -->
      </div>
    </div>
  `;
  
  app.textContent = '';
  app.appendChild(mainContainer);

  // Setup size toggle (fixed 1200√ó400 vs responsive 100%)
  const sizeBtn = mainContainer.querySelector('#toggle-size-btn') as HTMLButtonElement | null;
  const applySizeMode = (mode: 'fixed-1200' | 'responsive-100') => {
    document.body.classList.remove('fixed-1200', 'responsive-100');
    document.body.classList.add(mode);
    if (sizeBtn) sizeBtn.textContent = mode === 'fixed-1200' ? '100%' : '1200√ó400';
    try { localStorage.setItem('ui:sizeMode', mode); } catch {}
  };
  const savedMode = ((): 'fixed-1200' | 'responsive-100' => {
    try { const v = localStorage.getItem('ui:sizeMode'); return (v === 'responsive-100') ? 'responsive-100' : 'fixed-1200'; } catch { return 'fixed-1200'; }
  })();
  applySizeMode(savedMode);
  if (sizeBtn) {
    sizeBtn.addEventListener('click', () => {
      const next = document.body.classList.contains('fixed-1200') ? 'responsive-100' : 'fixed-1200';
      applySizeMode(next as 'fixed-1200' | 'responsive-100');
    });
  }
  
  // Setup navigation with new MenuManager
  setupNavigation();
}

function setupNavigation() {
  // Initialize MenuManager and create main navigation
  const navContainer = document.getElementById('main-navigation-container');
  
  if (!navContainer) {
    console.error('Main navigation container not found');
    return;
  }

  // Create main navigation menu
  createMenu('main-navigation', navContainer, {
    onItemClick: (data) => {
      const { item } = data;
      
      if (item.module) {
        // Define default routes for each module (first item from each column)
        const moduleDefaults: Record<string, string> = {
          'connect-id': '/connect-id/user/rfid',
          'connect-data': '/connect-data/requests/search',
          'connect-workshop': '/connect-workshop/requests/search',
          'connect-reports': '/connect-reports/executed/week',
          'connect-test': '/connect-test/rfid',
          'connect-manager': '/connect-manager/scenarios/list',
          'connect-config': '/connect-config/system/settings',
          'menu-editor': '/menu-editor'
        };
        
        // Use module-specific default route or fallback to basic route
        const routePath = moduleDefaults[item.module] || item.route || `/${item.module}`;
        
        // Update browser history with clean path
        window.history.pushState({}, '', routePath);
        
        // Load module directly
        handlePathChange();
      }
    }
  });
  
  // Handle path change events (popstate for back/forward)
  (window as any).handlePathChangeRef = handlePathChange; // Store reference for temporary disabling
  window.addEventListener('popstate', handlePathChange);
  // Handle MenuManager-driven route updates (custom event)
  window.addEventListener('routeChanged', () => handlePathChange());
  
  // Load initial route from current path
  handlePathChange();
}

function handlePathChange() {
  const path = window.location.pathname;
  if (path && path !== '/') {
    const pathSegments = path.split('/').filter(segment => segment); // Remove empty segments
    let moduleName = pathSegments[0] || '';
    let moduleType = pathSegments[1] || '';
    let method = pathSegments[2] || '';

    // Normalize defaults for connect-workshop: ensure /section/method present
    if (moduleName === 'connect-workshop') {
      // Reverse friendly aliases from URL to internal keys
      const sectionAliasReverse: Record<string, string> = {
        request: 'requests',
        service: 'services',
        transport: 'transport',
        disposition: 'dispositions'
      };
      const methodAliasReverse: Record<string, string> = {
        filter: 'search',
        create: 'new-request'
      };
      if (moduleType) moduleType = sectionAliasReverse[moduleType] || moduleType;
      if (method) method = methodAliasReverse[method] || method;

      // If only module provided -> default to /requests/search
      if (!moduleType) {
        moduleType = 'requests';
        method = 'search';
        window.history.replaceState({}, '', `/${moduleName}/request/filter`);
      }
      // If section provided without method -> append /search
      else if (moduleType && !method) {
        method = 'search';
        const friendlySection = Object.keys(sectionAliasReverse).find(k => sectionAliasReverse[k] === moduleType) || moduleType;
        window.history.replaceState({}, '', `/${moduleName}/${friendlySection}/${method === 'search' ? 'filter' : method}`);
      }
    }
    // Normalize defaults for connect-data: ensure /section/action present
    else if (moduleName === 'connect-data') {
      // If only module provided -> default to /requests/search
      if (!moduleType) {
        moduleType = 'requests';
        method = 'search';
        window.history.replaceState({}, '', `/${moduleName}/${moduleType}/${method}`);
      }
      // If section provided without method -> append /search
      else if (moduleType && !method) {
        method = 'search';
        window.history.replaceState({}, '', `/${moduleName}/${moduleType}/${method}`);
      }
    }
    
    // Normalize defaults for connect-config: ensure /section/subsection present
    else if (moduleName === 'connect-config') {
      // Reverse friendly aliases from URL to internal keys
      const sectionAliasReverse: Record<string, string> = {
        sys: 'system',
        dev: 'devices',
        sec: 'security'
      };
      const subsectionAliasReverse: Record<string, string> = {
        perf: 'performance', net: 'network', upd: 'updates', mon: 'monitoring',
        log: 'logs', diag: 'diagnostics', maint: 'maintenance', rfid: 'rfid-config',
        qr: 'qr-config', bar: 'barcode-config', sens: 'sensors', io: 'io-ports',
        cal: 'calibration', pwr: 'power', stor: 'storage', usr: 'users',
        perm: 'permissions', bak: 'backup', secset: 'security-settings',
        rpt: 'reports', lbl: 'labels'
      };
      if (moduleType) moduleType = sectionAliasReverse[moduleType] || moduleType;
      if (method) method = subsectionAliasReverse[method] || method;
      
      // If only module provided -> default to /system/performance
      if (!moduleType) {
        moduleType = 'system';
        method = 'performance';
        window.history.replaceState({}, '', `/${moduleName}/sys/perf`);
      }
      // If section provided without subsection -> append default based on section
      else if (moduleType && !method) {
        if (moduleType === 'system') method = 'performance';
        else if (moduleType === 'devices') method = 'rfid-config';
        else if (moduleType === 'security') method = 'users';
        else method = 'performance';
        
        const friendlySection = Object.keys(sectionAliasReverse).find(k => sectionAliasReverse[k] === moduleType) || moduleType;
        const friendlySubsection = Object.keys(subsectionAliasReverse).find(k => subsectionAliasReverse[k] === method) || method;
        window.history.replaceState({}, '', `/${moduleName}/${friendlySection}/${friendlySubsection}`);
      }
    }
    // Normalize defaults for connect-manager: ensure /action present
    else if (moduleName === 'connect-manager') {
      if (!moduleType) {
        moduleType = 'scenarios';
        window.history.replaceState({}, '', `/${moduleName}/${moduleType}`);
      }
    }

    if (moduleName) {
      
      // Update active button based on path using MenuManager (sidebar)
      const menuManager = MenuManager.getInstance();
      const mainMenu = menuManager.getMenu('main-navigation');
      if (mainMenu) {
        mainMenu.updateActiveItem(moduleName);
      }
      
      // Check if we need to reload the module or just update state
      const sameModule = currentModuleState.moduleName === moduleName;
      const sameType = currentModuleState.moduleType === (moduleType || '');
      const sameMethod = currentModuleState.method === (method || '');
      
      if (sameModule && sameType && sameMethod) {
        return; // No change needed
      }
      
      // Update state
      currentModuleState = {
        moduleName: moduleName || '',
        moduleType: moduleType || '',
        method: method || ''
      };
      
      // Only reload if it's a different module
      if (!sameModule) {
        loadModule(moduleName, moduleType, method);
      } else {
        // Same module, just update internal state
        updateModuleState(moduleName, moduleType, method);
      }
    }
  } else {
    // Default to first module if no path
    const firstButton = document.querySelector('.nav-btn');
    if (firstButton) {
      const moduleName = firstButton.getAttribute('data-module');
      const moduleType = firstButton.getAttribute('data-type');
      if (moduleName) {
        const path = moduleType ? `/${moduleName}/${moduleType}` : `/${moduleName}`;
        window.history.replaceState({}, '', path);
        loadModule(moduleName, moduleType);
      }
    }
  }
}

// Update module state without re-rendering
function updateModuleState(moduleName: string, moduleType?: string | null, method?: string | null) {
  
  switch (moduleName) {
    case 'connect-id':
      // Try to find existing ConnectID view and update its state
      const connectIdElement = document.querySelector('.connect-id-compact');
      if (connectIdElement) {
        // Send message to ConnectID to update method
        const event = new CustomEvent('connectid:update-method', {
          detail: { method: method || 'rfid' }
        });
        window.dispatchEvent(event);
      }
      break;
    case 'connect-data':
      // Update ConnectData state directly when staying in the same module
      const dataElement = document.querySelector('.connect-data-compact');
      if (dataElement) {
        const event = new CustomEvent('connectdata:update-state', {
          detail: { section: moduleType, method: method }
        });
        window.dispatchEvent(event);
      }
      break;
      
    case 'connect-workshop':
      // Update ConnectWorkshop state directly
      const workshopElement = document.querySelector('.connect-workshop-compact');
      if (workshopElement) {
        const event = new CustomEvent('connectworkshop:update-state', {
          detail: { section: moduleType, action: method }
        });
        window.dispatchEvent(event);
      }
      break;
      
    case 'connect-config':
      // Update ConnectConfig state directly
      const configElement = document.querySelector('.connect-config-compact');
      if (configElement) {
        const event = new CustomEvent('connectconfig:update-state', {
          detail: { section: moduleType, subsection: method }
        });
        window.dispatchEvent(event);
      }
      break;
      
    case 'connect-test':
      // Update ConnectTest state directly
      const testElement = document.querySelector('.connect-test-compact');
      if (testElement) {
        const event = new CustomEvent('connecttest:update-state', {
          detail: { section: moduleType, method: method }
        });
        window.dispatchEvent(event);
      }
      break;
      
    case 'connect-reports':
      // Update ConnectReports state directly
      const reportsElement = document.querySelector('.connect-reports-compact');
      if (reportsElement) {
        const event = new CustomEvent('connectreports:update-state', {
          detail: { reportType: moduleType, view: method }
        });
        window.dispatchEvent(event);
      }
      break;
    
    case 'connect-manager':
      // Update ConnectManager state directly
      const managerElement = document.querySelector('.connect-manager-compact');
      if (managerElement) {
        const event = new CustomEvent('connectmanager:update-state', {
          detail: { action: moduleType || 'scenarios' }
        });
        window.dispatchEvent(event);
      }
      break;
      
    default:
      // Fall back to full reload for unsupported modules
      loadModule(moduleName, moduleType, method);
  }
}

function loadModule(moduleName: string, moduleType?: string | null, method?: string | null) {
  const container = document.getElementById('module-container');
  if (!container) return;
  
  try {
    // Show professional loading state
    showLoadingState(container, moduleName);
    
    // Add performance timing
    const startTime = performance.now();
    
    switch (moduleName) {
      case 'connect-id':
        loadConnectIdModule(container, moduleType || 'user', method);
        break;
      case 'connect-test':
        // For test: moduleType could be section or method depending on URL structure
        loadConnectTestModule(container, moduleType, method);
        break;
      case 'connect-data':  // Renamed from connect-data
        loadConnectDataModule(container, moduleType, method);
        break;
      case 'connect-workshop':
        // For workshop: moduleType is section, method is action
        loadConnectWorkshopModule(container, moduleType, method);
        break;
      case 'connect-config':
        // For config: moduleType is section
        loadConnectConfigModule(container, moduleType);
        break;
      case 'connect-reports':
        // For reports: moduleType is report type, method is view
        loadConnectReportsModule(container, moduleType, method);
        break;
      case 'connect-manager':
        // For manager: moduleType is action
        loadConnectManagerModule(container, moduleType);
        break;
      case 'menu-editor':
        loadMenuEditorModule(container);
        break;
      default:
        container.innerHTML = `<div class="error">Unknown module: ${moduleName}</div>`;
    }
    
    // Track loading performance
    const loadTime = performance.now() - startTime;
    
  } catch (error) {
    showErrorState(container, moduleName, error instanceof Error ? error : String(error));
    console.error(`‚ùå Failed to load module ${moduleName}:`, error);
  }
}

// Professional loading state
function showLoadingState(container: HTMLElement, moduleName: string) {
  const moduleNames: Record<string, string> = {
    'connect-id': 'ConnectID',
    'connect-test': 'ConnectTest', 
    'connect-workshop': 'ConnectWorkshop',
    'connect-data': 'ConnectData',
    'connect-config': 'ConnectConfig',
    'connect-reports': 'ConnectReports',
    'connect-manager': 'ConnectManager',
    'menu-editor': 'Menu Editor'
  };
  
  const displayName = moduleNames[moduleName] || moduleName;
  
  container.innerHTML = `
    <div class="loading-container">
      <div class="loading-spinner">
        <div class="spinner"></div>
      </div>
      <div class="loading-text">
        <h3>Loading ${displayName}...</h3>
        <p>Preparing module components</p>
      </div>
      <div class="loading-progress">
        <div class="progress-bar">
          <div class="progress-fill"></div>
        </div>
      </div>
    </div>
  `;
  
  // Add loading animation
  setTimeout(() => {
    const progressFill = container.querySelector('.progress-fill') as HTMLElement;
    if (progressFill) {
      progressFill.style.width = '100%';
    }
  }, 100);
}

// Professional error state
function showErrorState(container: HTMLElement, moduleName: string, error: unknown) {
  const message = error instanceof Error ? error.message : String(error);
  container.innerHTML = `
    <div class="error-container">
      <div class="error-icon">‚ö†Ô∏è</div>
      <div class="error-content">
        <h3>Failed to load ${moduleName}</h3>
        <p class="error-message">${message}</p>
        <div class="error-actions">
          <button class="btn-retry" onclick="window.location.reload()">üîÑ Retry</button>
          <button class="btn-home" onclick="window.location.hash = '#/'">üè† Home</button>
        </div>
      </div>
    </div>
  `;
}


function loadConnectIdModule(container: HTMLElement, _type: string = 'user', method?: string | null) {
  import('./modules/connect-id/connect-id.module').then(async () => {
    const module = moduleManager.getModule('connect-id');
    const { ConnectIdView } = await import('./modules/connect-id/connect-id.view');
    const view = new ConnectIdView(module as any);
    
    container.innerHTML = '';
    const viewElement = view.render();
    container.appendChild(viewElement);
    
    // Set the initial method directly after render
    setTimeout(() => {
      view.setInitialMethod(method || 'rfid');
      window.dispatchEvent(new CustomEvent('connectid:dom-ready'));
    }, 50);
  }).catch(error => {
    container.innerHTML = `<div class="error">Failed to load ConnectID module: ${error}</div>`;
  });
}

function loadConnectTestModule(container: HTMLElement, section?: string | null, params?: string | null) {
  import('./modules/connect-test/connect-test.module').then(async () => {
    const module = moduleManager.getModule('connect-test');
    const { ConnectTestView } = await import('./modules/connect-test/connect-test.view');
    const view = new ConnectTestView(module as any);
    
    container.innerHTML = '';
    const viewElement = view.render();
    container.appendChild(viewElement);
    
    // Set initial state from URL
    setTimeout(() => {
      if (section && (view as any).setInitialSection) {
        (view as any).setInitialSection(section);
      }
      if (params && (view as any).setInitialParams) {
        (view as any).setInitialParams(params);
      }
    }, 50);
    
  }).catch(error => {
    container.innerHTML = `<div class="error">Failed to load ConnectTest module: ${error}</div>`;
  });
}

function loadConnectDataModule(container: HTMLElement, section?: string | null, method?: string | null) {
  import('./modules/connect-data/connect-filter.module').then(async () => {
    const module = moduleManager.getModule('connect-data');
    const { ConnectDataView } = await import('./modules/connect-data/connect-filter.view');
    const view = new ConnectDataView(module as any);
    
    container.innerHTML = '';
    const viewElement = view.render();
    container.appendChild(viewElement);
    
    // Set initial section and method from URL
    setTimeout(() => {
      if (section && (view as any).setInitialSection) {
        (view as any).setInitialSection(section);
      }
      if (method && (view as any).setInitialMethod) {
        (view as any).setInitialMethod(method);
      }
    }, 50);

  }).catch(error => {
    container.innerHTML = `<div class="error">Failed to load ConnectData module: ${error}</div>`;
  });
}

function loadConnectWorkshopModule(container: HTMLElement, section?: string | null, action?: string | null) {
  import('./modules/connect-workshop/connect-workshop.module').then(async () => {
    const module = moduleManager.getModule('connect-workshop');
    const { ConnectWorkshopView } = await import('./modules/connect-workshop/connect-workshop.view');
    const view = new ConnectWorkshopView(module as any);
    
    container.innerHTML = '';
    const viewElement = view.render();
    container.appendChild(viewElement);
    
    // Set initial section and action from URL
    setTimeout(() => {
      if (section && (view as any).setInitialSection) {
        (view as any).setInitialSection(section);
      }
      if (action && (view as any).setInitialAction) {
        (view as any).setInitialAction(action);
      }
    }, 50);
    
  }).catch(error => {
    container.innerHTML = `<div class="error">Failed to load ConnectWorkshop module: ${error}</div>`;
  });
}

function loadConnectConfigModule(container: HTMLElement, section?: string | null) {
  import('./modules/connect-config/connect-config.module').then(async () => {
    const module = moduleManager.getModule('connect-config');
    const { ConnectConfigView } = await import('./modules/connect-config/connect-config.view');
    const view = new ConnectConfigView(module as any);
    
    container.innerHTML = '';
    const viewElement = view.render();
    container.appendChild(viewElement);
    
    // Set initial section from URL
    setTimeout(() => {
      if (section && (view as any).setInitialSection) {
        (view as any).setInitialSection(section);
      }
    }, 50);
    
  }).catch(error => {
    container.innerHTML = `<div class="error">Failed to load ConnectConfig module: ${error}</div>`;
  });
}

function loadConnectReportsModule(container: HTMLElement, reportType?: string | null, view?: string | null) {
  import('./modules/connect-reports/connect-reports.module').then(async () => {
    const module = moduleManager.getModule('connect-reports');
    const { ConnectReportsView } = await import('./modules/connect-reports/connect-reports.view');
    const reportView = new ConnectReportsView(module as any);
    
    container.innerHTML = '';
    const viewElement = reportView.render();
    container.appendChild(viewElement);
    
    // Set initial state from URL
    setTimeout(() => {
      if (reportType && (reportView as any).setInitialReportType) {
        (reportView as any).setInitialReportType(reportType);
      }
      if (view && (reportView as any).setInitialView) {
        (reportView as any).setInitialView(view);
      }
    }, 50);
    
  }).catch(error => {
    container.innerHTML = `<div class="error">Failed to load ConnectReports module: ${error}</div>`;
  });
}

function loadConnectManagerModule(container: HTMLElement, action?: string | null) {
  import('./modules/connect-manager/connect-manager.view').then(async ({ ConnectManagerView }) => {
    const view = new ConnectManagerView();
    
    container.innerHTML = '';
    const viewElement = view.render();
    container.appendChild(viewElement);
    
    // Set initial action from URL
    setTimeout(() => {
      if (action && (view as any).switchAction) {
        (view as any).switchAction(action, viewElement);
      }
    }, 50);
    
  }).catch(error => {
    container.innerHTML = `<div class="error">Failed to load ConnectManager module: ${error}</div>`;
  });
}

function loadMenuEditorModule(container: HTMLElement) {
  import('./modules/menu-editor/menu-editor.module').then(async () => {
    const module = moduleManager.getModule('menu-editor');
    const { MenuEditorView } = await import('./modules/menu-editor/menu-editor.view');
    const view = new MenuEditorView(module as any);
    
    container.innerHTML = '';
    const viewElement = view.render();
    container.appendChild(viewElement);
    
  }).catch(error => {
    container.innerHTML = `<div class="error">Failed to load Menu Editor module: ${error}</div>`;
  });
}

export function oldLoadConnectReportsModule(container: HTMLElement) {
  container.innerHTML = `
    <div class="reports-compact">
      <div class="compact-layout">
        <!-- Column 1: Report Types -->
        <div class="menu-column">
          <h3 class="column-title">Raporty</h3>
          <button class="report-type-item active" data-type="executed">
            <span class="menu-icon">‚úÖ</span>
            <span class="menu-label">Wykonane</span>
          </button>
          <button class="report-type-item" data-type="planned">
            <span class="menu-icon">üìÖ</span>
            <span class="menu-label">Planowane</span>
          </button>
        </div>

        <!-- Column 2: Calendar Options (shown only for planned) -->
        <div class="menu-column" id="calendar-column">
          <h3 class="column-title">Widok</h3>
          <button class="calendar-view-item active" data-view="week">
            <span class="menu-icon">üìÖ</span>
            <span class="menu-label">Tygodnie</span>
          </button>
          <button class="calendar-view-item" data-view="month">
            <span class="menu-icon">üóìÔ∏è</span>
            <span class="menu-label">MiesiƒÖce</span>
          </button>
          <button class="calendar-view-item" data-view="year">
            <span class="menu-icon">üìÜ</span>
            <span class="menu-label">Lata</span>
          </button>
        </div>

        <!-- Main Content -->
        <div class="main-content">
          <div class="content-body">
            <!-- Executed Reports -->
            <div id="executed-content" class="report-content active">
              <div class="reports-table-container">
                <!-- Search and Filters -->
                <div class="reports-search-section">
                  <div class="search-row">
                    <input type="text" id="reports-search" placeholder="Szukaj po urzƒÖdzeniu, dacie, operatorze...">
                    <button id="reports-search-btn">üîç Szukaj</button>
                  </div>
                  <div class="filters-row">
                    <select id="status-filter">
                      <option value="">Wszystkie statusy</option>
                      <option value="success">‚úÖ Pozytywne</option>
                      <option value="error">‚ùå Negatywne</option>
                      <option value="warning">‚ö†Ô∏è Ostrze≈ºenia</option>
                    </select>
                    <select id="device-filter">
                      <option value="">Wszystkie urzƒÖdzenia</option>
                      <option value="pss-7000">PSS-7000</option>
                      <option value="pss-5000">PSS-5000</option>
                      <option value="pss-3000">PSS-3000</option>
                    </select>
                    <select id="test-type-filter">
                      <option value="">Wszystkie testy</option>
                      <option value="szczelnosc">Szczelno≈õƒá</option>
                      <option value="przeplyw">Przep≈Çyw</option>
                      <option value="funkcjonalny">Funkcjonalny</option>
                      <option value="kalibracja">Kalibracja</option>
                    </select>
                    <select id="date-filter">
                      <option value="">Wszystkie daty</option>
                      <option value="today">Dzisiaj</option>
                      <option value="week">Ostatni tydzie≈Ñ</option>
                      <option value="month">Ostatni miesiƒÖc</option>
                      <option value="custom">Niestandardowy zakres</option>
                    </select>
                    <input type="date" id="date-from">
                    <input type="date" id="date-to">
                  </div>
                </div>

                <!-- Reports Table -->
                <div class="reports-table-wrapper">
                  <table class="reports-table">
                    <thead>
                      <tr>
                        <th data-sort="date">üìÖ Data/Czas ‚Üï</th>
                        <th data-sort="device">üì± UrzƒÖdzenie ‚Üï</th>
                        <th data-sort="test">üß™ Testy ‚Üï</th>
                        <th data-sort="operator">üë§ Operator ‚Üï</th>
                        <th data-sort="status">‚úÖ Status ‚Üï</th>
                        <th>‚öôÔ∏è Akcje</th>
                      </tr>
                    </thead>
                    <tbody id="reports-table-body">
                      <tr>
                        <td>2025-10-08 17:30</td>
                        <td>PSS-7000 #12345</td>
                        <td>Szczelno≈õƒá, Przep≈Çyw, Funkcjonalny</td>
                        <td>Jan K.</td>
                        <td><span>‚úÖ Pozytywny</span></td>
                        <td>
                          <button>üëÅÔ∏è Poka≈º</button>
                          <button>üìÑ PDF</button>
                          <button>üìß Wy≈õlij</button>
                        </td>
                      </tr>
                      <tr>
                        <td>2025-10-08 16:15</td>
                        <td>PSS-5000 #67890</td>
                        <td>Szczelno≈õƒá</td>
                        <td>Anna N.</td>
                        <td><span>‚ùå Negatywny</span></td>
                        <td>
                          <button>üëÅÔ∏è Poka≈º</button>
                          <button>üìÑ PDF</button>
                          <button>üìß Wy≈õlij</button>
                        </td>
                      </tr>
                      <tr>
                        <td>2025-10-08 15:45</td>
                        <td>PSS-3000 #11111</td>
                        <td>Kalibracja, Przep≈Çyw</td>
                        <td>Piotr W.</td>
                        <td><span>‚ö†Ô∏è Ostrze≈ºenie</span></td>
                        <td>
                          <button>üëÅÔ∏è Poka≈º</button>
                          <button>üìÑ PDF</button>
                          <button>üìß Wy≈õlij</button>
                        </td>
                      </tr>
                      <tr>
                        <td>2025-10-08 14:20</td>
                        <td>PSS-7000 #54321</td>
                        <td>Funkcjonalny</td>
                        <td>Jan K.</td>
                        <td><span>‚úÖ Pozytywny</span></td>
                        <td>
                          <button>üëÅÔ∏è Poka≈º</button>
                          <button>üìÑ PDF</button>
                          <button>üìß Wy≈õlij</button>
                        </td>
                      </tr>
                      <tr>
                        <td>2025-10-08 13:10</td>
                        <td>PSS-5000 #98765</td>
                        <td>Szczelno≈õƒá, Kalibracja</td>
                        <td>Anna N.</td>
                        <td><span>‚úÖ Pozytywny</span></td>
                        <td>
                          <button>üëÅÔ∏è Poka≈º</button>
                          <button>üìÑ PDF</button>
                          <button>üìß Wy≈õlij</button>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                <!-- Pagination -->
                <div class="reports-pagination">
                  <div class="pagination-info">
                    Pokazano 1-5 z 47 raport√≥w
                  </div>
                  <div class="pagination-controls">
                    <button disabled>‚¨ÖÔ∏è Poprzednia</button>
                    <button>1</button>
                    <button>2</button>
                    <button>3</button>
                    <button>Nastƒôpna ‚û°Ô∏è</button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Planned Reports -->
            <div id="planned-content" class="report-content">
              <!-- Weekly Calendar -->
              <div id="week-view" class="calendar-view active">
                <div class="calendar-header">
                  <h4>üìÖ Widok Tygodniowy - Pa≈∫dziernik 2025</h4>
                </div>
                <div class="week-calendar">
                  <!-- Tydzie≈Ñ 1 -->
                  <div class="day-header">Pon</div>
                  <div class="day-header">Wt</div>
                  <div class="day-header">≈ör</div>
                  <div class="day-header">Czw</div>
                  <div class="day-header">Pt</div>
                  <div class="day-header">Sob</div>
                  <div class="day-header">Ndz</div>
                  
                  <div class="day-cell"><span>7</span></div>
                  <div class="day-cell"><span>8</span><br><span>üîß Serwis</span></div>
                  <div class="day-cell"><span>9</span></div>
                  <div class="day-cell"><span>10</span><br><span>üß™ Test</span></div>
                  <div class="day-cell"><span>11</span></div>
                  <div class="day-cell"><span>12</span></div>
                  <div class="day-cell"><span>13</span></div>
                  
                  <!-- Tydzie≈Ñ 2 -->
                  <div class="day-cell"><span>14</span><br><span>üìã Raport</span></div>
                  <div class="day-cell"><span>15</span></div>
                  <div class="day-cell"><span>16</span><br><span>üîß Serwis</span></div>
                  <div class="day-cell"><span>17</span></div>
                  <div class="day-cell"><span>18</span><br><span>üß™ Test</span></div>
                  <div class="day-cell"><span>19</span></div>
                  <div class="day-cell"><span>20</span></div>
                  
                  <!-- Tydzie≈Ñ 3 -->
                  <div class="day-cell"><span>21</span></div>
                  <div class="day-cell"><span>22</span><br><span>üîß Serwis</span></div>
                  <div class="day-cell"><span>23</span></div>
                  <div class="day-cell"><span>24</span><br><span>üß™ Test</span></div>
                  <div class="day-cell"><span>25</span></div>
                  <div class="day-cell"><span>26</span></div>
                  <div class="day-cell"><span>27</span></div>
                  
                  <!-- Tydzie≈Ñ 4 -->
                  <div class="day-cell"><span>28</span><br><span>üìã Raport</span></div>
                  <div class="day-cell"><span>29</span></div>
                  <div class="day-cell"><span>30</span><br><span>üîß Serwis</span></div>
                  <div class="day-cell"><span>31</span></div>
                  <div class="day-cell"><span>1</span></div>
                  <div class="day-cell"><span>2</span></div>
                  <div class="day-cell"><span>3</span></div>
                </div>
              </div>

              <!-- Monthly Tables -->
              <div id="month-view" class="calendar-view">
                <div class="calendar-header">
                  <h4>üóìÔ∏è Widok 3 Miesiƒôcy - 2025</h4>
                </div>
                
                <!-- Three Month Tables Container -->
                <div class="three-months-container">
                
                  <!-- Previous Month -->
                  <div class="month-table">
                    <div class="month-header">
                      ‚Üê Wrzesie≈Ñ 2025
                    </div>
                    <table>
                      <thead>
                        <tr>
                          <th>Pn</th>
                          <th>Wt</th>
                          <th>≈ör</th>
                          <th>Cz</th>
                          <th>Pt</th>
                          <th>Sb</th>
                          <th>Nd</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td>1</td>
                          <td>2</td>
                          <td>3</td>
                          <td>4</td>
                          <td>5</td>
                          <td>6</td>
                          <td>7</td>
                        </tr>
                        <tr>
                          <td>8</td>
                          <td>9</td>
                          <td>10<div></div></td>
                          <td>11</td>
                          <td>12</td>
                          <td>13</td>
                          <td>14</td>
                        </tr>
                        <tr>
                          <td>15</td>
                          <td>16</td>
                          <td>17</td>
                          <td>18<div></div></td>
                          <td>19</td>
                          <td>20</td>
                          <td>21</td>
                        </tr>
                        <tr>
                          <td>22</td>
                          <td>23</td>
                          <td>24</td>
                          <td>25<div></div></td>
                          <td>26</td>
                          <td>27</td>
                          <td>28</td>
                        </tr>
                        <tr>
                          <td>29</td>
                          <td>30</td>
                          <td></td>
                          <td></td>
                          <td></td>
                          <td></td>
                          <td></td>
                        </tr>
                      </tbody>
                    </table>
                    <div>3 zaplanowane</div>
                  </div>

                  <!-- Current Month -->
                  <div class="month-table">
                    <div class="month-header">
                      Pa≈∫dziernik 2025 (Aktualny)
                    </div>
                    <table>
                      <thead>
                        <tr>
                          <th>Pn</th>
                          <th>Wt</th>
                          <th>≈ör</th>
                          <th>Cz</th>
                          <th>Pt</th>
                          <th>Sb</th>
                          <th>Nd</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td></td>
                          <td></td>
                          <td>1</td>
                          <td>2<div></div></td>
                          <td>3</td>
                          <td>4</td>
                          <td>5</td>
                        </tr>
                        <tr>
                          <td>6</td>
                          <td>7</td>
                          <td>8<div></div></td>
                          <td>9</td>
                          <td>10<div></div></td>
                          <td>11</td>
                          <td>12</td>
                        </tr>
                        <tr>
                          <td>13</td>
                          <td>14<div></div></td>
                          <td>15</td>
                          <td>16<div></div></td>
                          <td>17</td>
                          <td>18</td>
                          <td>19</td>
                        </tr>
                        <tr>
                          <td>20</td>
                          <td>21</td>
                          <td>22<div></div></td>
                          <td>23</td>
                          <td>24<div></div></td>
                          <td>25</td>
                          <td>26</td>
                        </tr>
                        <tr>
                          <td>27</td>
                          <td>28<div></div></td>
                          <td>29</td>
                          <td>30<div></div></td>
                          <td>31</td>
                          <td></td>
                          <td></td>
                        </tr>
                      </tbody>
                    </table>
                    <div>7 zaplanowanych</div>
                  </div>

                  <!-- Next Month -->
                  <div class="month-table">
                    <div class="month-header">
                      Listopad 2025 ‚Üí
                    </div>
                    <table>
                      <thead>
                        <tr>
                          <th>Pn</th>
                          <th>Wt</th>
                          <th>≈ör</th>
                          <th>Cz</th>
                          <th>Pt</th>
                          <th>Sb</th>
                          <th>Nd</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td></td>
                          <td></td>
                          <td></td>
                          <td></td>
                          <td></td>
                          <td>1</td>
                          <td>2</td>
                        </tr>
                        <tr>
                          <td>3</td>
                          <td>4</td>
                          <td>5<div></div></td>
                          <td>6</td>
                          <td>7</td>
                          <td>8</td>
                          <td>9</td>
                        </tr>
                        <tr>
                          <td>10</td>
                          <td>11</td>
                          <td>12<div></div></td>
                          <td>13</td>
                          <td>14</td>
                          <td>15<div></div></td>
                          <td>16</td>
                        </tr>
                        <tr>
                          <td>17</td>
                          <td>18<div></div></td>
                          <td>19</td>
                          <td>20</td>
                          <td>21</td>
                          <td>22</td>
                          <td>23</td>
                        </tr>
                        <tr>
                          <td>24</td>
                          <td>25</td>
                          <td>26</td>
                          <td>27</td>
                          <td>28</td>
                          <td>29</td>
                          <td>30</td>
                        </tr>
                      </tbody>
                    </table>
                    <div>4 zaplanowane</div>
                  </div>
                  
                </div>
                
                <div>
                  <span>‚óè Serwis</span> | 
                  <span>‚óè Test</span> | 
                  <span>‚óè Raport</span>
                </div>
              </div>

              <!-- Yearly Calendar -->
              <div id="year-view" class="calendar-view">
                <div class="calendar-header">
                  <h4>üìÜ Widok Roczny - 2025</h4>
                </div>
                <div class="year-months-grid">
                  <div class="month-mini-card">
                    <div>Stycze≈Ñ</div>
                    <div>5 zaplanowanych</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Luty</div>
                    <div>3 zaplanowane</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Marzec</div>
                    <div>7 zaplanowanych</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Kwiecie≈Ñ</div>
                    <div>2 zaplanowane</div>
                    <div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Maj</div>
                    <div>6 zaplanowanych</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Czerwiec</div>
                    <div>4 zaplanowane</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Lipiec</div>
                    <div>8 zaplanowanych</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Sierpie≈Ñ</div>
                    <div>3 zaplanowane</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Wrzesie≈Ñ</div>
                    <div>5 zaplanowanych</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Pa≈∫dziernik</div>
                    <div>9 zaplanowanych</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Listopad</div>
                    <div>4 zaplanowane</div>
                    <div>
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                  <div class="month-mini-card">
                    <div>Grudzie≈Ñ</div>
                    <div>2 zaplanowane</div>
                    <div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>
                </div>
                <div>
                  <span>‚óè Serwis</span> | 
                  <span>‚óè Test</span> | 
                  <span>‚óè Raport</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <style>
      .report-type-item:hover, .calendar-view-item:hover { background: #4a4a4a !important; color: white !important; }
      .report-type-item.active, .calendar-view-item.active { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important; color: white !important; }
      .report-content { display: none; }
      .report-content.active { display: block; }
      .calendar-view { display: none; }
      .calendar-view.active { display: block; }
    </style>
  `;
  
  // Update top-bar title
  const topBarTitle = document.getElementById('top-bar-section-title');
  if (topBarTitle) topBarTitle.textContent = 'Raporty - Wykonane';
  
  // Add event listeners
  const reportTypeButtons = container.querySelectorAll('.report-type-item');
  const calendarViewButtons = container.querySelectorAll('.calendar-view-item');
  const calendarColumn = container.querySelector('#calendar-column') as HTMLElement;
  
  reportTypeButtons.forEach(btn => {
    btn.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      const type = target.getAttribute('data-type');
      
      // Update active button
      reportTypeButtons.forEach(b => b.classList.remove('active'));
      target.classList.add('active');
      
      // Show/hide content
      container.querySelectorAll('.report-content').forEach(content => {
        content.classList.remove('active');
      });
      const activeContent = container.querySelector(`#${type}-content`);
      if (activeContent) activeContent.classList.add('active');
      
      // Show calendar column for planned
      if (calendarColumn) {
        calendarColumn.style.display = type === 'planned' ? 'block' : 'none';
      }
      
      // Update title
      const titles = { executed: 'Wykonane', planned: 'Planowane' };
      if (topBarTitle) topBarTitle.textContent = `Raporty - ${titles[type as keyof typeof titles]}`;
    });
  });
  
  calendarViewButtons.forEach(btn => {
    btn.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      const view = target.getAttribute('data-view');
      
      // Update active button
      calendarViewButtons.forEach(b => b.classList.remove('active'));
      target.classList.add('active');
      
      // Show/hide calendar views
      container.querySelectorAll('.calendar-view').forEach(viewEl => {
        viewEl.classList.remove('active');
      });
      const activeView = container.querySelector(`#${view}-view`);
      if (activeView) activeView.classList.add('active');
    });
  });
  
}

function showErrorUI(error: unknown): void {
  const message = error instanceof Error ? error.message : String(error);
  const errorDiv = document.createElement('div');
  errorDiv.className = 'error';
  errorDiv.innerHTML = `
    <h3>Application Failed to Start</h3>
    <p>${message}</p>
    <p>Check the console for more details.</p>
  `;
  
  const app = document.getElementById('app');
  if (app) {
    app.appendChild(errorDiv);
  } else {
    document.body.appendChild(errorDiv);
  }
}

// Start the application
initializeApp();
