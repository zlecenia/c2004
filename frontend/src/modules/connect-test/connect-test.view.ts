// frontend/src/modules/connect-test/connect-test.view.ts - Refactored with PageManager
import { ConnectTestModule } from './connect-test.module';
import { ConnectTestPageManager } from './pages';
import { createModuleMenu } from '../../components/connect-menu';

export class ConnectTestView {
  private currentMethod: string = 'rfid';
  private pageManager: ConnectTestPageManager;

  constructor(_module: ConnectTestModule) {
    this.pageManager = new ConnectTestPageManager();
  }


  render(): HTMLElement {
    const container = document.createElement('div');
    container.className = 'connect-test-compact';
    
    // Update top-bar elements
    this.updateTopBarElements();
    
    // Create layout with menu and content
    container.innerHTML = `
      <div class="module-with-menu">
        <div id="connect-test-menu-container">
          <!-- Menu will be generated by MenuManager -->
        </div>
        <div class="module-main-content" id="connect-test-content">
          <!-- Content will be loaded by PageManager -->
        </div>
      </div>
    `;
    
    // Initialize page manager
    const contentContainer = container.querySelector('#connect-test-content') as HTMLElement;
    if (contentContainer) {
      this.pageManager.initialize(contentContainer);
    }
    
    // Create module menu using MenuManager
    const menuContainer = container.querySelector('#connect-test-menu-container') as HTMLElement;
    if (menuContainer) {
      createModuleMenu('connect-test', menuContainer, {
        onItemClick: (data) => {
          const { item } = data;
          
          if (item.method) {
            this.currentMethod = item.method;
            
            this.updateTopBarElements();
            this.loadCurrentPage();
          }
        }
      });
    }
    
    // Add custom styles
    this.addCustomStyles();
    
    // Load initial page
    this.loadCurrentPage();
    
    return container;
  }

  /**
   * Load current page based on method
   */
  private loadCurrentPage(): void {
    this.pageManager.loadPage(this.currentMethod);
  }

  private updateTopBarElements(): void {
    // Update top-bar submenu
    const submenu = document.getElementById('top-bar-submenu');
    if (submenu) submenu.textContent = 'ðŸ§ª Testowanie urzÄ…dzeÅ„';
    
    // Update top-bar section title
    const sectionTitle = document.getElementById('top-bar-section-title');
    if (sectionTitle) {
      const methodName = this.getMethodDisplayName(this.currentMethod);
      sectionTitle.textContent = `ConnectTest - ${methodName}`;
    }
  }

  private getMethodDisplayName(method: string): string {
    const names: Record<string, string> = {
      'rfid': 'RFID',
      'qr': 'QR Code',
      'barcode': 'Barcode',
      'search': 'Szukaj'
    };
    return names[method] || 'Metoda';
  }

  private addCustomStyles(): void {
    // Check if styles already added
    if (document.getElementById('connect-test-compact-styles')) {
      return;
    }

    const style = document.createElement('style');
    style.id = 'connect-test-compact-styles';
    style.textContent = this.getCompactStyles();
    document.head.appendChild(style);
  }
  
  private getCompactStyles(): string {
    return `
      .connect-test-compact {
        height: 100%;
        width: 100%;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      }

      .module-with-menu {
        display: flex;
        height: 100%;
        width: 100%;
      }
      
      #connect-test-menu-container {
        width: 280px;
        background: #f8f9fa;
        border-right: 1px solid #e9ecef;
        overflow-y: auto;
      }
      
      .module-main-content {
        flex: 1;
        overflow-y: auto;
        background: white;
      }
    `;
  }

}
