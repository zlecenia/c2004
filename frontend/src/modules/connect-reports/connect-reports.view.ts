// frontend/src/modules/connect-reports/connect-reports.view.ts - Refactored with PageManager
import { ConnectReportsModule } from './connect-reports.module';
import { ConnectReportsPageManager } from './pages';
import { createModuleMenu } from '../../components/connect-menu';

export class ConnectReportsView {
  private currentSection: string = 'executed';
  private currentView: string = 'week';
  private pageManager: ConnectReportsPageManager;

  constructor(private module: ConnectReportsModule) {
    this.pageManager = new ConnectReportsPageManager();
  }

  render(): HTMLElement {
    const container = document.createElement('div');
    container.className = 'connect-reports-compact';
    
    // Update top-bar elements
    this.updateTopBarElements();
    
    // Create layout with menu and content
    container.innerHTML = `
      <div class="module-with-menu">
        <div id="connect-reports-menu-container">
          <!-- Menu will be generated by MenuManager -->
        </div>
        <div class="module-main-content" id="connect-reports-content">
          <!-- Content will be loaded by PageManager -->
        </div>
      </div>
    `;
    
    // Initialize page manager
    const contentContainer = container.querySelector('#connect-reports-content') as HTMLElement;
    if (contentContainer) {
      this.pageManager.initialize(contentContainer);
    }
    
    // Create module menu using MenuManager
    const menuContainer = container.querySelector('#connect-reports-menu-container') as HTMLElement;
    if (menuContainer) {
      createModuleMenu('connect-reports', menuContainer, {
        onItemClick: (data) => {
          const { item } = data;
          console.log(`ðŸ“Š ConnectReports Menu: Click on ${item.id}`);
          
          if (item.section) {
            this.currentSection = item.section;
            console.log(`ðŸ“Š ConnectReports: Section changed to ${this.currentSection}`);
          }
          
          if (item.action) {
            this.currentView = item.action;
            console.log(`ðŸ“Š ConnectReports: View changed to ${this.currentView}`);
          }
          
          this.updateTopBarElements();
          this.loadCurrentPage();
        }
      });
    }
    
    // Add custom styles
    this.addCustomStyles();
    
    // Load initial page
    this.loadCurrentPage();
    
    return container;
  }

  /**
   * Load current page based on section and view
   */
  private loadCurrentPage(): void {
    console.log(`ðŸ“Š ConnectReports: Loading page ${this.currentSection}-${this.currentView}`);
    this.pageManager.loadPage(this.currentSection, this.currentView);
  }

  private updateTopBarElements(): void {
    // Update top-bar submenu
    const submenu = document.getElementById('top-bar-submenu');
    if (submenu) submenu.textContent = 'ðŸ“Š Reports Module';
    
    // Update top-bar section title
    const sectionTitle = document.getElementById('top-bar-section-title');
    if (sectionTitle) {
      const sectionName = this.getSectionDisplayName(this.currentSection);
      const viewName = this.getViewDisplayName(this.currentView);
      sectionTitle.textContent = `ConnectReports - ${sectionName} - ${viewName}`;
    }
  }

  private getSectionDisplayName(section: string): string {
    const names: Record<string, string> = {
      'executed': 'Wykonane',
      'planned': 'Planowane',
      'export': 'Export'
    };
    return names[section] || 'Raporty';
  }

  private getViewDisplayName(view: string): string {
    const names: Record<string, string> = {
      'week': 'TydzieÅ„',
      'month': 'MiesiÄ…c',
      'year': 'Rok',
      'custom': 'Niestandardowy'
    };
    return names[view] || 'Widok';
  }

  private addCustomStyles(): void {
    // Check if styles already added
    if (document.getElementById('connect-reports-compact-styles')) {
      return;
    }

    const style = document.createElement('style');
    style.id = 'connect-reports-compact-styles';
    style.textContent = this.getCompactStyles();
    document.head.appendChild(style);
  }
  
  private getCompactStyles(): string {
    return `
      .connect-reports-compact {
        height: 100%;
        width: 100%;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      }

      .module-with-menu {
        display: flex;
        height: 100%;
        width: 100%;
      }
      
      #connect-reports-menu-container {
        width: 280px;
        background: #f8f9fa;
        border-right: 1px solid #e9ecef;
        overflow-y: auto;
      }
      
      .module-main-content {
        flex: 1;
        overflow-y: auto;
        background: white;
      }
    `;
  }

}
