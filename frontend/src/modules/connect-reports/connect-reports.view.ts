// frontend/src/modules/connect-reports/connect-reports.view.ts - Refactored with PageManager
import { ConnectReportsModule } from './connect-reports.module';
import { ConnectReportsPageManager } from './pages';
import { createModuleMenu, getMenuManager } from '../../components/connect-menu';

export class ConnectReportsView {
  private currentSection: string = 'executed';
  private currentView: string = 'week';
  private pageManager: ConnectReportsPageManager;
  private routerListenerAttached: boolean = false;
  private boundUpdateState?: (ev: CustomEvent) => void;

  constructor(_module: ConnectReportsModule) {
    this.pageManager = new ConnectReportsPageManager();
  }

  render(): HTMLElement {
    const container = document.createElement('div');
    container.className = 'connect-reports-compact';
    
    // Update top-bar elements
    this.updateTopBarElements();
    
    // Create layout with menu and content
    container.innerHTML = `
      <div class="module-with-menu">
        <div id="connect-reports-menu-container">
          <!-- Menu will be generated by MenuManager -->
        </div>
        <div class="module-main-content" id="connect-reports-content">
          <!-- Content will be loaded by PageManager -->
        </div>
      </div>
    `;
    
    // Initialize page manager
    const contentContainer = container.querySelector('#connect-reports-content') as HTMLElement;
    if (contentContainer) {
      this.pageManager.initialize(contentContainer);
    }
    
    // Create module menu using MenuManager
    const menuContainer = container.querySelector('#connect-reports-menu-container') as HTMLElement;
    if (menuContainer) {
      createModuleMenu('connect-reports', menuContainer, {
        onItemClick: (data) => {
          const { item, column } = data;

          // Column 1: report-types -> update report section
          if (column.id === 'report-types' && item.section) {
            this.currentSection = item.section;
          }

          // Column 2: view-options -> update view
          if (column.id === 'view-options') {
            // Prefer semantic method if present, fallback to id
            this.currentView = (item as any).method || item.id;
          }

          this.updateTopBarElements();
          this.updateThirdColumnVisibility();
          this.loadCurrentPage();
        }
      });

      // Sync menu active items with current URL on initial load
      try {
        const manager = getMenuManager();
        manager.updateMenuForRoute(window.location.pathname);
      } catch (e) {
        console.warn('ConnectReports: unable to sync menu with route', e);
      }
    }
    
    // Add custom styles
    this.addCustomStyles();
    
    // Setup router sync to react on URL-driven state updates
    this.setupRouterSync();

    // Load initial page
    this.updateThirdColumnVisibility();
    this.loadCurrentPage();
    
    return container;
  }

  /**
   * Load current page based on section and view
   */
  private loadCurrentPage(): void {
    // When 'planning' is selected in the 2nd column, we only reveal the 3rd column
    if (this.currentView === 'planning') {
      return;
    }
    this.pageManager.loadPage(this.currentSection, this.currentView);
  }

  // Public API â€” used by main.ts
  public setInitialReportType(section: string): void {
    if (section && section !== this.currentSection) {
      this.currentSection = section;
      this.updateTopBarElements();
      this.loadCurrentPage();
    }
  }

  public setInitialView(view: string): void {
    if (view && view !== this.currentView) {
      this.currentView = view;
      this.updateTopBarElements();
      this.loadCurrentPage();
    }
  }

  private setupRouterSync(): void {
    if (this.routerListenerAttached) return;
    this.boundUpdateState = ((ev: CustomEvent) => {
      const { reportType, view } = (ev.detail || {}) as { reportType?: string, view?: string };
      let changed = false;
      if (reportType && reportType !== this.currentSection) {
        this.currentSection = reportType;
        changed = true;
      }
      if (view && view !== this.currentView) {
        this.currentView = view;
        changed = true;
      }
      if (changed) {
        this.updateTopBarElements();
        this.updateThirdColumnVisibility();
        this.loadCurrentPage();
      }
    }) as unknown as (ev: CustomEvent) => void;
    window.addEventListener('connectreports:update-state', this.boundUpdateState as unknown as EventListener);
    this.routerListenerAttached = true;
  }

  private updateThirdColumnVisibility(): void {
    // Show a third column when user selects "Planowanie" in the 2nd column
    try {
      const manager = getMenuManager();
      const menu = manager.getMenu('connect-reports-menu');
      if (menu && (menu as any).toggleColumn) {
        (menu as any).toggleColumn('planning-options', this.currentView === 'planning');
      }
    } catch (e) {
      // noop
    }
  }

  private updateTopBarElements(): void {
    // Update top-bar submenu
    const submenu = document.getElementById('top-bar-submenu');
    if (submenu) submenu.textContent = 'ðŸ“Š Reports Module';
    
    // Update top-bar section title
    const sectionTitle = document.getElementById('top-bar-section-title');
    if (sectionTitle) {
      const sectionName = this.getSectionDisplayName(this.currentSection);
      const viewName = this.getViewDisplayName(this.currentView);
      sectionTitle.textContent = `ConnectReports - ${sectionName} - ${viewName}`;
    }
  }

  private getSectionDisplayName(section: string): string {
    const names: Record<string, string> = {
      'executed': 'Wykonane',
      'planned': 'Planowane',
      'export': 'Export'
    };
    return names[section] || 'Raporty';
  }

  private getViewDisplayName(view: string): string {
    const names: Record<string, string> = {
      'week': 'TydzieÅ„',
      'month': 'MiesiÄ…c',
      'year': 'Rok',
      'custom': 'Niestandardowy'
    };
    return names[view] || 'Widok';
  }

  private addCustomStyles(): void {
    // Check if styles already added
    if (document.getElementById('connect-reports-compact-styles')) {
      return;
    }

    const style = document.createElement('style');
    style.id = 'connect-reports-compact-styles';
    style.textContent = this.getCompactStyles();
    document.head.appendChild(style);
  }
  
  private getCompactStyles(): string {
    return `
      .connect-reports-compact {
        height: 100%;
        width: 100%;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      }

      .module-with-menu {
        display: flex;
        height: 100%;
        width: 100%;
      }
      
      #connect-reports-menu-container {
        background: #f8f9fa;
        border-right: 1px solid #e9ecef;
        overflow-y: auto;
      }
      
      .module-main-content {
        flex: 1;
        overflow-y: auto;
        background: white;
      }
    `;
  }

}
