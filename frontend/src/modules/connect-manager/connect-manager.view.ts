// frontend/src/modules/connect-manager/connect-manager.view.ts - Refactored with PageManager
import { ConnectManagerPageManager } from './pages';
import { createModuleMenu, getMenuManager } from '../../components/connect-menu';

export class ConnectManagerView {
  private currentSection: string = 'scenarios';
  private currentMethod: string = 'list';
  private currentItemId: string = '';
  private readonly pageManager: ConnectManagerPageManager;

  constructor() {
    this.pageManager = new ConnectManagerPageManager();
    // Listen for intra-module state updates from main router
    window.addEventListener('connectmanager:update-state', (e: Event) => {
      const detail = (e as CustomEvent).detail || {};
      const nextAction = detail.action as string | undefined;
      if (nextAction && nextAction !== this.currentSection) {
        this.currentSection = nextAction;
        this.updateTopBarElements();
        this.loadCurrentPage();
        // Sync menu with URL selection
        try {
          const manager = getMenuManager();
          manager.updateMenuForRoute(window.location.pathname);
        } catch {}
      }
    });
  }

  render(): HTMLElement {
    const container = document.createElement('div');
    container.className = 'connect-manager-compact';
    
    // Update top-bar elements
    this.updateTopBarElements();
    
    // Create layout with menu and content
    container.innerHTML = `
      <div class="module-with-menu">
        <div class="connect-manager-menu-container">
          <!-- Menu will be generated by MenuManager -->
        </div>
        <div class="module-main-content" id="connect-manager-content">
          <!-- Content will be loaded by PageManager -->
        </div>
      </div>
    `;
    
    // Initialize page manager
    const contentContainer = container.querySelector('#connect-manager-content') as HTMLElement;
    if (contentContainer) {
      this.pageManager.initialize(contentContainer);
    }
    
    // Create module menu using MenuManager
    const menuContainer = container.querySelector('.connect-manager-menu-container') as HTMLElement;
    if (menuContainer) {
      createModuleMenu('connect-manager', menuContainer, {
        onItemClick: (data) => {
          const { item, column } = data;
          
          // Column 1: Sections (scenarios, activities, test-types)
          if (column.id === 'manager-sections-column' && item.section) {
            this.currentSection = item.section;
            this.currentMethod = 'list'; // Reset to list when changing section
            this.currentItemId = '';
          }
          // Column 2: Actions (list, new, saved)
          else if (column.id === 'manager-actions-column' && item.method) {
            this.currentMethod = item.method;
            this.currentItemId = '';
          }
          
          this.updateTopBarElements();
          this.loadCurrentPage();
        }
      });
      // Sync active states in menu with current URL on initial load
      try {
        const manager = getMenuManager();
        manager.updateMenuForRoute(window.location.pathname);
      } catch {}
    }
    
    // Add custom styles
    this.addCustomStyles();
    
    // Load initial page
    this.loadCurrentPage();
    
    return container;
  }

  /**
   * Load current page based on section
   */
  private loadCurrentPage(): void {
    this.pageManager.loadPage(this.currentSection);
  }

  // Public API used by main.ts to set initial action/section from URL
  public setInitialSection(section: string): void {
    if (section && section !== this.currentSection) {
      this.currentSection = section;
      this.updateTopBarElements();
      this.loadCurrentPage();
    }
  }

  private updateTopBarElements(): void {
    // Update top-bar submenu
    const submenu = document.getElementById('top-bar-submenu');
    if (submenu) submenu.textContent = '⚙️ Test Manager';
    
    // Update top-bar section title
    const sectionTitle = document.getElementById('top-bar-section-title');
    if (sectionTitle) {
      const sectionLabel = this.getSectionDisplayName(this.currentSection);
      const methodLabel = this.getMethodDisplayName(this.currentMethod);
      let title = `ConnectManager - ${sectionLabel} - ${methodLabel}`;
      if (this.currentItemId) {
        title += ` - ${this.currentItemId}`;
      }
      sectionTitle.textContent = title;
    }
  }

  private getSectionDisplayName(section: string): string {
    const names: Record<string, string> = {
      'scenarios': 'Scenariusze',
      'activities': 'Czynności',
      'test-types': 'Rodzaj Testu'
    };
    return names[section] || 'Manager';
  }

  private getMethodDisplayName(method: string): string {
    const names: Record<string, string> = {
      'list': 'Lista',
      'new': 'Nowy',
      'saved': 'Zapisane'
    };
    return names[method] || method;
  }


  private addCustomStyles(): void {
    // Check if styles already added
    if (document.getElementById('connect-manager-compact-styles')) {
      return;
    }

    const style = document.createElement('style');
    style.id = 'connect-manager-compact-styles';
    style.textContent = this.getCompactStyles();
    document.head.appendChild(style);
  }

  private getCompactStyles(): string {
    return `
      .connect-manager-compact {
        height: 100%;
        width: 100%;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      }

      .module-with-menu {
        display: flex;
        height: 100%;
        width: 100%;
      }
      
      .connect-manager-menu-container {
        background: #2a2a2a;
        border-right: 1px solid #e9ecef;
        overflow-y: auto;
      }
      
      .module-main-content {
        flex: 1;
        overflow-y: auto;
        background: white;
      }
    `;
  }
}
