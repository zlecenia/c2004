// frontend/src/modules/connect-manager/__tests__/scenario-builder.test.ts
import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';
import { ConnectManagerService } from '../connect-manager.service';
import { ConnectManagerDatabase } from '../services/database.service';
import { ScenariosPage } from '../pages/scenarios.page';

describe('Scenario Builder', () => {
  let service: ConnectManagerService;
  let database: ConnectManagerDatabase;

  beforeEach(async () => {
    service = new ConnectManagerService();
    database = new ConnectManagerDatabase({ filename: ':memory:' });
    await database.initialize();
  });

  afterEach(async () => {
    await database.close();
  });

  describe('ConnectManagerService', () => {
    describe('Test Scenarios', () => {
      it('should get all test scenarios', async () => {
        const scenarios = await service.getTestScenarios();
        expect(scenarios).toBeDefined();
        expect(Array.isArray(scenarios)).toBe(true);
        expect(scenarios.length).toBeGreaterThan(0);
      });

      it('should get scenario by ID', async () => {
        const scenario = await service.getTestScenarioById('scenario-1');
        expect(scenario).toBeDefined();
        expect(scenario?.name).toBe('Test szczelności C20');
        expect(scenario?.goals).toBeDefined();
        expect(scenario?.goals.length).toBeGreaterThan(0);
      });

      it('should save new test scenario', async () => {
        const newScenario = {
          name: 'New Test Scenario',
          description: 'Test description',
          goals: [
            {
              name: 'Test Goal',
              tasks: [
                {
                  function: 'Włącz',
                  object: 'pompa 1'
                }
              ],
              conditions: [
                {
                  type: 'if' as const,
                  parameter: 'ciśnienie',
                  operator: '>',
                  value: 10,
                  unit: 'mbar'
                }
              ]
            }
          ]
        };

        const saved = await service.saveTestScenario(newScenario);
        expect(saved).toBeDefined();
        expect(saved.id).toBeDefined();
        expect(saved.name).toBe(newScenario.name);
      });

      it('should update existing scenario', async () => {
        const updates = {
          name: 'Updated Name',
          description: 'Updated Description'
        };

        const updated = await service.updateTestScenario('scenario-1', updates);
        expect(updated).toBeDefined();
        expect(updated.name).toBe(updates.name);
        expect(updated.description).toBe(updates.description);
      });

      it('should delete scenario', async () => {
        const scenariosBefore = await service.getTestScenarios();
        const countBefore = scenariosBefore.length;

        await service.deleteTestScenario('scenario-2');

        const scenariosAfter = await service.getTestScenarios();
        expect(scenariosAfter.length).toBe(countBefore - 1);
      });

      it('should search scenarios', async () => {
        const results = await service.searchTestScenarios('szczelność');
        expect(results).toBeDefined();
        expect(results.length).toBeGreaterThan(0);
        expect(results[0].name).toContain('szczelności');
      });
    });

    describe('Library Elements', () => {
      it('should get scenario functions', async () => {
        const functions = await service.getScenarioFunctions();
        expect(functions).toBeDefined();
        expect(Array.isArray(functions)).toBe(true);
        expect(functions.length).toBeGreaterThan(0);
        
        const actionFunction = functions.find(f => f.category === 'action');
        expect(actionFunction).toBeDefined();
      });

      it('should get scenario objects', async () => {
        const objects = await service.getScenarioObjects();
        expect(objects).toBeDefined();
        expect(Array.isArray(objects)).toBe(true);
        
        const pump = objects.find(o => o.type === 'pump');
        expect(pump).toBeDefined();
      });

      it('should get scenario parameters', async () => {
        const parameters = await service.getScenarioParameters();
        expect(parameters).toBeDefined();
        expect(Array.isArray(parameters)).toBe(true);
        
        const pressure = parameters.find(p => p.name === 'ciśnienie');
        expect(pressure).toBeDefined();
        expect(pressure?.unit).toBe('mbar');
      });

      it('should get scenario templates', async () => {
        const templates = await service.getScenarioTemplates();
        expect(templates).toBeDefined();
        expect(Array.isArray(templates)).toBe(true);
        expect(templates.length).toBeGreaterThan(0);
      });
    });

    describe('Export/Import', () => {
      it('should export scenario to JSON', async () => {
        const json = await service.exportScenario('scenario-1');
        expect(json).toBeDefined();
        
        const parsed = JSON.parse(json);
        expect(parsed.name).toBe('Test szczelności C20');
        expect(parsed.goals).toBeDefined();
      });

      it('should import scenario from JSON', async () => {
        const scenarioData = {
          name: 'Imported Scenario',
          description: 'Imported from JSON',
          goals: [
            {
              name: 'Imported Goal',
              tasks: [],
              conditions: []
            }
          ]
        };

        const json = JSON.stringify(scenarioData);
        const imported = await service.importScenario(json);
        
        expect(imported).toBeDefined();
        expect(imported.name).toBe(scenarioData.name);
      });

      it('should handle invalid JSON on import', async () => {
        const invalidJson = '{ invalid json }';
        
        await expect(service.importScenario(invalidJson)).rejects.toThrow('Invalid scenario data');
      });
    });
  });

  describe('Database Operations', () => {
    describe('Scenario CRUD', () => {
      it('should create scenario in database', async () => {
        const scenarioData = {
          name: 'DB Test Scenario',
          description: 'Testing database operations',
          author: 'test-user',
          goals: [
            {
              name: 'Test Goal',
              description: 'Goal description',
              tasks: [],
              conditions: []
            }
          ],
          tags: ['test', 'database']
        };

        const id = await database.createScenario(scenarioData);
        expect(id).toBeDefined();
        expect(typeof id).toBe('number');
      });

      it('should retrieve scenario with full details', async () => {
        const scenarioData = {
          name: 'Full Details Test',
          description: 'Test with complete structure',
          author: 'test-user',
          goals: [
            {
              name: 'Goal 1',
              tasks: [
                {
                  function_id: 1,
                  object_id: 1,
                  operator: 'AND',
                  parameters: [
                    { parameter_id: 1, value: 10, unit_id: 1 }
                  ]
                }
              ],
              conditions: [
                {
                  type: 'IF',
                  result_action: 'Test OK',
                  parameters: [
                    { parameter_id: 1, operator: '>', value: 5, unit_id: 1 }
                  ]
                }
              ]
            }
          ],
          tags: ['complete', 'test']
        };

        const id = await database.createScenario(scenarioData);
        const retrieved = await database.getScenarioById(id);

        expect(retrieved).toBeDefined();
        expect(retrieved.name).toBe(scenarioData.name);
        expect(retrieved.goals).toBeDefined();
        expect(retrieved.goals.length).toBe(1);
        expect(retrieved.goals[0].tasks.length).toBe(1);
        expect(retrieved.goals[0].conditions.length).toBe(1);
        expect(retrieved.tags).toContain('complete');
      });

      it('should update scenario', async () => {
        const id = await database.createScenario({
          name: 'Original Name',
          description: 'Original Description',
          author: 'test-user',
          goals: [],
          tags: []
        });

        await database.updateScenario(id, {
          name: 'Updated Name',
          description: 'Updated Description'
        });

        const updated = await database.getScenarioById(id);
        expect(updated.name).toBe('Updated Name');
        expect(updated.description).toBe('Updated Description');
      });

      it('should delete scenario with cascade', async () => {
        const id = await database.createScenario({
          name: 'To Be Deleted',
          description: 'This will be deleted',
          author: 'test-user',
          goals: [
            {
              name: 'Goal to delete',
              tasks: [],
              conditions: []
            }
          ],
          tags: ['delete']
        });

        await database.deleteScenario(id);
        const deleted = await database.getScenarioById(id);
        expect(deleted).toBeNull();
      });

      it('should search scenarios', async () => {
        await database.createScenario({
          name: 'Searchable Scenario',
          description: 'Contains keyword TEST',
          author: 'test-user',
          goals: [],
          tags: ['searchable', 'test']
        });

        const results = await database.searchScenarios('TEST');
        expect(results.length).toBeGreaterThan(0);
        
        const found = results.find(r => r.name === 'Searchable Scenario');
        expect(found).toBeDefined();
      });
    });

    describe('Library Elements', () => {
      it('should add custom function', async () => {
        const id = await database.addFunction('Custom Function', 'action', 'Custom description');
        expect(id).toBeDefined();
        
        const functions = await database.getAllFunctions();
        const custom = functions.find(f => f.name === 'Custom Function');
        expect(custom).toBeDefined();
      });

      it('should add custom object', async () => {
        const id = await database.addObject('Custom Object', 'pump', 'Custom pump');
        expect(id).toBeDefined();
        
        const objects = await database.getAllObjects();
        const custom = objects.find(o => o.name === 'Custom Object');
        expect(custom).toBeDefined();
      });
    });

    describe('Templates', () => {
      it('should create template from scenario', async () => {
        const scenarioId = await database.createScenario({
          name: 'Template Source',
          description: 'Will become a template',
          author: 'test-user',
          goals: [
            { name: 'Template Goal', tasks: [], conditions: [] }
          ],
          tags: []
        });

        const templateId = await database.createTemplateFromScenario(
          scenarioId,
          'New Template',
          'test-category'
        );

        expect(templateId).toBeDefined();

        const template = await database.getTemplateById(templateId);
        expect(template).toBeDefined();
        expect(template.name).toBe('New Template');
      });

      it('should increment template usage count', async () => {
        const templateId = await database.createTemplateFromScenario(1, 'Usage Template', 'test');
        
        await database.useTemplate(templateId);
        
        const template = await database.getTemplateById(templateId);
        expect(template.usage_count).toBe(1);
        
        await database.useTemplate(templateId);
        const templateAfter = await database.getTemplateById(templateId);
        expect(templateAfter.usage_count).toBe(2);
      });
    });

    describe('Test Assignments', () => {
      it('should create test assignment', async () => {
        const assignmentData = {
          device_id: 'TEST-DEVICE-001',
          scenario_id: 1,
          interval_type: 'monthly',
          interval_value: 1
        };

        const id = await database.createAssignment(assignmentData);
        expect(id).toBeDefined();

        const assignments = await database.getAssignmentsByDevice('TEST-DEVICE-001');
        expect(assignments.length).toBeGreaterThan(0);
      });

      it('should mark test as completed and schedule next', async () => {
        const assignmentId = await database.createAssignment({
          device_id: 'TEST-DEVICE-002',
          scenario_id: 1,
          interval_type: 'daily',
          interval_value: 1
        });

        await database.markTestCompleted(assignmentId);

        const assignments = await database.getAssignmentsByDevice('TEST-DEVICE-002');
        const assignment = assignments.find(a => a.id === assignmentId);
        
        expect(assignment).toBeDefined();
        expect(assignment.last_performed).toBeDefined();
        expect(new Date(assignment.next_scheduled) > new Date()).toBe(true);
      });
    });

    describe('Statistics', () => {
      it('should get database statistics', async () => {
        const stats = await database.getStatistics();
        
        expect(stats).toBeDefined();
        expect(stats.totalScenarios).toBeDefined();
        expect(stats.totalTemplates).toBeDefined();
        expect(stats.totalActivities).toBeDefined();
        expect(stats.totalAssignments).toBeDefined();
        expect(stats.overdueTests).toBeDefined();
        expect(stats.upcomingTests).toBeDefined();
        expect(Array.isArray(stats.mostUsedTemplates)).toBe(true);
        expect(Array.isArray(stats.recentScenarios)).toBe(true);
      });
    });
  });

  describe('UI Components', () => {
    describe('ScenariosPage', () => {
      let container: HTMLElement;

      beforeEach(() => {
        container = document.createElement('div');
        container.innerHTML = ScenariosPage.getContent();
        document.body.appendChild(container);
      });

      afterEach(() => {
        document.body.removeChild(container);
      });

      it('should render scenario builder interface', () => {
        const scenarioNameInput = container.querySelector('#scenario-name');
        expect(scenarioNameInput).toBeDefined();
        
        const goalsContainer = container.querySelector('#goals-container');
        expect(goalsContainer).toBeDefined();
        
        const addGoalBtn = container.querySelector('#add-goal-btn');
        expect(addGoalBtn).toBeDefined();
      });

      it('should have library elements', () => {
        const libraryItems = container.querySelectorAll('.library-item');
        expect(libraryItems.length).toBeGreaterThan(0);
      });

      it('should have example templates', () => {
        const examples = container.querySelectorAll('.example-item');
        expect(examples.length).toBeGreaterThan(0);
      });

      it('should have action buttons', () => {
        const saveBtn = container.querySelector('.btn-save-scenario');
        expect(saveBtn).toBeDefined();
        
        const loadBtn = container.querySelector('.btn-load-scenario');
        expect(loadBtn).toBeDefined();
        
        const exportBtn = container.querySelector('.btn-export');
        expect(exportBtn).toBeDefined();
      });
    });

    describe('Drag and Drop', () => {
      it('should support draggable library items', () => {
        const container = document.createElement('div');
        container.innerHTML = ScenariosPage.getContent();
        
        const libraryItem = container.querySelector('.library-item') as HTMLElement;
        expect(libraryItem?.getAttribute('draggable')).toBe('true');
      });
    });
  });

  describe('Scenario Building Logic', () => {
    it('should build valid scenario structure', () => {
      const scenarioBuilder = {
        name: 'Test Scenario',
        goals: [
          {
            name: 'Wytworzyć podciśnienie',
            tasks: [
              { function: 'Włącz', object: 'pompa 1', operator: null },
              { function: 'Włącz', object: 'zawór 1', operator: 'AND' }
            ],
            conditions: [
              {
                type: 'IF',
                parameter: 'czas',
                operator: '>',
                value: 10,
                unit: 's',
                result: 'niskie ciśnienie > 10 mbar'
              },
              {
                type: 'ELSE',
                errorMessage: 'Nieszczelność'
              }
            ]
          }
        ]
      };

      expect(scenarioBuilder.goals).toBeDefined();
      expect(scenarioBuilder.goals[0].tasks.length).toBe(2);
      expect(scenarioBuilder.goals[0].conditions.length).toBe(2);
    });

    it('should validate scenario parameters', () => {
      const validateParameter = (param: any, min: number, max: number): boolean => {
        return param.value >= min && param.value <= max;
      };

      const pressureParam = { value: 500, unit: 'mbar' };
      const isValid = validateParameter(pressureParam, 0, 1000);
      expect(isValid).toBe(true);

      const invalidParam = { value: 1500, unit: 'mbar' };
      const isInvalid = validateParameter(invalidParam, 0, 1000);
      expect(isInvalid).toBe(false);
    });

    it('should generate scenario preview text', () => {
      const generatePreview = (scenario: any): string => {
        let preview = `SCENARIO: ${scenario.name}\n\n`;
        
        scenario.goals.forEach((goal: any) => {
          preview += `GOAL: ${goal.name}\n`;
          
          goal.tasks.forEach((task: any, index: number) => {
            preview += `  TASK ${index + 1}: ${task.function} [${task.object}]`;
            if (task.operator) {
              preview += ` ${task.operator}`;
            }
            preview += '\n';
          });
          
          goal.conditions.forEach((condition: any) => {
            if (condition.type === 'IF') {
              preview += `  IF [${condition.parameter}] [${condition.operator}] [${condition.value} ${condition.unit}]\n`;
            } else if (condition.type === 'ELSE') {
              preview += `  ELSE ERROR "${condition.errorMessage}"\n`;
            }
          });
          
          preview += '\n';
        });
        
        return preview;
      };

      const scenario = {
        name: 'Test',
        goals: [
          {
            name: 'Goal 1',
            tasks: [{ function: 'Włącz', object: 'pompa 1' }],
            conditions: [{ type: 'IF', parameter: 'czas', operator: '>', value: 10, unit: 's' }]
          }
        ]
      };

      const preview = generatePreview(scenario);
      expect(preview).toContain('SCENARIO: Test');
      expect(preview).toContain('GOAL: Goal 1');
      expect(preview).toContain('TASK 1: Włącz [pompa 1]');
      expect(preview).toContain('IF [czas] [>] [10 s]');
    });
  });
});

// Integration tests
describe('Scenario Builder Integration', () => {
  let service: ConnectManagerService;
  let database: ConnectManagerDatabase;

  beforeEach(async () => {
    service = new ConnectManagerService();
    database = new ConnectManagerDatabase({ filename: ':memory:' });
    await database.initialize();
  });

  afterEach(async () => {
    await database.close();
  });

  it('should complete full scenario creation workflow', async () => {
    // 1. Get library elements
    const functions = await service.getScenarioFunctions();
    const objects = await service.getScenarioObjects();
    const parameters = await service.getScenarioParameters();

    expect(functions.length).toBeGreaterThan(0);
    expect(objects.length).toBeGreaterThan(0);
    expect(parameters.length).toBeGreaterThan(0);

    // 2. Build scenario
    const scenario = {
      name: 'Integration Test Scenario',
      description: 'Full workflow test',
      goals: [
        {
          name: 'Test Goal',
          tasks: [
            {
              function: functions[0].name,
              object: objects[0].name,
              parameters: { value: 10, unit: 'mbar' }
            }
          ],
          conditions: [
            {
              type: 'if' as const,
              parameter: parameters[0].name,
              operator: '>',
              value: 5,
              unit: parameters[0].unit
            }
          ]
        }
      ]
    };

    // 3. Save scenario
    const saved = await service.saveTestScenario(scenario);
    expect(saved.id).toBeDefined();

    // 4. Export scenario
    const exported = await service.exportScenario(saved.id);
    expect(exported).toBeDefined();

    // 5. Delete and re-import
    await service.deleteTestScenario(saved.id);
    const imported = await service.importScenario(exported);
    expect(imported.name).toBe(scenario.name);
  });
});
