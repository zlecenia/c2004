// frontend/src/modules/connect-workshop/connect-workshop.view.ts - Refactored with PageManager
import { ConnectWorkshopModule } from './connect-workshop.module';
import { ConnectWorkshopPageManager } from './pages';
import { createModuleMenu, getMenuManager } from '../../components/connect-menu';

export class ConnectWorkshopView {
  private currentSection: string = 'requests';
  private currentMethod: string = 'search';
  private pageManager: ConnectWorkshopPageManager;

  constructor(_module: ConnectWorkshopModule) {
    // Initialize page manager
    this.pageManager = new ConnectWorkshopPageManager();

    // Listen for intra-module state updates from main router
    window.addEventListener('connectworkshop:update-state', (e: Event) => {
      const detail = (e as CustomEvent).detail || {};
      const nextSection = detail.section as string | undefined;
      const nextMethod = detail.action as string | undefined;
      if (nextSection) this.currentSection = nextSection;
      if (nextMethod) this.currentMethod = nextMethod;
      this.updateTopBarElements();
      this.loadCurrentPage();

      // Sync menu active items to URL
      const manager = getMenuManager();
      manager.updateMenuForRoute(window.location.pathname);
    });
  }

  render(): HTMLElement {
    const container = document.createElement('div');
    container.className = 'connect-workshop-compact';
    
    // Update top-bar elements
    this.updateTopBarElements();
    
    // Create new layout with menu and content
    container.innerHTML = `
      <div class="module-with-menu">
        <div class="connect-workshop-menu-container">
          <!-- Menu will be generated by MenuManager -->
        </div>
        <div class="module-main-content" id="connect-workshop-content">
          <!-- Content will be loaded by PageManager -->
        </div>
      </div>
    `;

    // Initialize page manager with content container
    const contentContainer = container.querySelector('#connect-workshop-content') as HTMLElement;
    if (contentContainer) {
      this.pageManager.initialize(contentContainer);
    }

    // Create module menu using MenuManager
    const menuContainer = container.querySelector('.connect-workshop-menu-container') as HTMLElement;
    if (menuContainer) {
      createModuleMenu('connect-workshop', menuContainer, {
        onItemClick: (data) => {
          const { item, column } = data;
          
          // Update current section and method based on menu click
          if (item.section) {
            this.currentSection = item.section;
          }
          if (item.method) {
            this.currentMethod = item.method;
          }
          
          // Load the page for current selection
          this.loadCurrentPage();
        }
      });

      // Sync active states in menu with current URL (e.g., /connect-workshop/requests/search)
      const manager = getMenuManager();
      manager.updateMenuForRoute(window.location.pathname);
    }
    
    // Add custom styles
    this.addCustomStyles();
    
    // Load initial page based on current state
    this.loadCurrentPage();
    
    return container;
  }

  /**
   * Load current page based on section and method
   */
  private loadCurrentPage(): void {
    this.pageManager.loadPage(this.currentSection, this.currentMethod);
  }

  /**
   * Optional setters used by main.ts lazy loader to initialize state from URL
   */
  public setInitialSection(section: string): void {
    this.currentSection = section;
    this.updateTopBarElements();
    this.loadCurrentPage();
  }

  public setInitialAction(action: string): void {
    this.currentMethod = action;
    this.updateTopBarElements();
    this.loadCurrentPage();
  }

  private updateTopBarElements(): void {
    // Update top-bar submenu
    const submenu = document.getElementById('top-bar-submenu');
    if (submenu) submenu.textContent = 'ðŸ”§ Workshop Client';
    
    // Update top-bar section title
    const sectionTitle = document.getElementById('top-bar-section-title');
    if (sectionTitle) {
      const sectionLabel = this.currentSection === 'requests' ? 'ZgÅ‚oszenia' :
                          this.currentSection === 'services' ? 'Serwisy' :
                          this.currentSection === 'transport' ? 'Transport' :
                          this.currentSection === 'dispositions' ? 'Dyspozycje' : 'Workshop';
      const methodLabel = this.currentMethod === 'search' ? 'Szukaj' :
                          this.currentMethod === 'new-request' ? 'Dodaj' : this.currentMethod;
      sectionTitle.textContent = `ConnectWorkshop - ${sectionLabel} - ${methodLabel}`;
    }
  }

  private addCustomStyles(): void {
    // Check if styles already added
    if (document.getElementById('connect-workshop-compact-styles')) {
      return;
    }

    const style = document.createElement('style');
    style.id = 'connect-workshop-compact-styles';
    style.textContent = this.getCompactStyles();
    document.head.appendChild(style);
  }

  private getCompactStyles(): string {
    return `
      .connect-workshop-compact {
        height: 100%;
        width: 100%;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      }

      .module-with-menu {
        display: flex;
        height: 100%;
        width: 100%;
      }
      
      .connect-workshop-menu-container {
        background: #2a2a2a;
        border-right: 1px solid #e9ecef;
        overflow-y: auto;
      }
      
      .module-main-content {
        flex: 1;
        overflow-y: auto;
        background: white;
      }
    `;
  }
}
