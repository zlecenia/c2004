#!/bin/bash
# Quick Fixes Script - Automatic repairs for simple issues
# Generated by project analysis

echo "üîß Starting automatic fixes for common issues..."
echo "================================================="

# Navigate to project root
cd "$(dirname "$0")/.."

# 1. Remove console.log statements from source code (30 min task)
echo -e "\nüöÄ Fixing: Console.log statements..."
console_count_before=$(find frontend/src -name "*.ts" -exec grep -l "console\.log" {} \; 2>/dev/null | wc -l)
echo "üìä Found console.log in $console_count_before files"

if [ "$console_count_before" -gt 0 ]; then
    # Create backup first
    echo "üíæ Creating backup..."
    tar -czf "backup-console-logs-$(date +%Y%m%d-%H%M%S).tar.gz" frontend/src/
    
    # Remove console.log statements (but keep console.error, console.warn)
    find frontend/src -name "*.ts" -exec sed -i '/console\.log/d' {} \;
    
    console_count_after=$(find frontend/src -name "*.ts" -exec grep -l "console\.log" {} \; 2>/dev/null | wc -l)
    echo "‚úÖ Removed console.log from $(($console_count_before - $console_count_after)) files"
else
    echo "‚úÖ No console.log statements found in source code"
fi

# 2. Fix simple TypeScript formatting issues
echo -e "\nüìù Fixing: Basic formatting issues..."
if command -v prettier &> /dev/null; then
    echo "üé® Running Prettier on TypeScript files..."
    npx prettier --write "frontend/src/**/*.ts" --config frontend/.prettierrc 2>/dev/null || \
    npx prettier --write "frontend/src/**/*.ts"
    echo "‚úÖ Code formatting improved"
else
    echo "‚ö†Ô∏è  Prettier not found, skipping formatting"
fi

# 3. Remove trailing whitespace
echo -e "\nüßπ Fixing: Trailing whitespace..."
whitespace_files=$(find frontend/src backend/app -name "*.ts" -o -name "*.js" -o -name "*.py" | xargs grep -l "[[:space:]]$" 2>/dev/null | wc -l)
if [ "$whitespace_files" -gt 0 ]; then
    find frontend/src backend/app -name "*.ts" -o -name "*.js" -o -name "*.py" -exec sed -i 's/[[:space:]]*$//' {} \;
    echo "‚úÖ Removed trailing whitespace from $whitespace_files files"
else
    echo "‚úÖ No trailing whitespace found"
fi

# 4. Fix simple import ordering (if available)
echo -e "\nüì¶ Checking: Import organization..."
if command -v eslint &> /dev/null; then
    cd frontend
    npx eslint --fix "src/**/*.ts" --rule "sort-imports: error" 2>/dev/null || echo "‚ö†Ô∏è  ESLint fix skipped"
    cd ..
    echo "‚úÖ Import organization checked"
else
    echo "‚ö†Ô∏è  ESLint not found, skipping import fixes"
fi

# 5. Create summary report
echo -e "\nüìä Generating fix summary..."
cat > QUICK_FIXES_APPLIED.md << EOF
# Quick Fixes Applied - $(date)

## Automatic Fixes Completed

### ‚úÖ Console.log Removal
- **Before**: $console_count_before files with console.log
- **After**: $(find frontend/src -name "*.ts" -exec grep -l "console\.log" {} \; 2>/dev/null | wc -l) files with console.log
- **Impact**: Production-ready logging

### ‚úÖ Code Formatting
- Applied Prettier formatting to TypeScript files
- Removed trailing whitespace

### ‚úÖ Import Organization
- Organized import statements (if ESLint available)

## Next Manual Steps Required

### üî¥ High Priority (This Week)
1. **TypeScript 'any' types** - 12 files need proper type definitions
2. **innerHTML usage** - 30 files need XSS protection
3. **Missing error handling** - 5 async functions need try-catch

### üü† Medium Priority (Next Week)  
1. **Large files** - 36 files >300 lines need refactoring
2. **Style duplication** - 11 CSS patterns need consolidation
3. **Direct DOM manipulation** - 34 files need framework patterns

### üü° Low Priority (When Time Allows)
1. **TODO comments** - 2 files have unresolved TODOs
2. **Template migration** - 7 modules need style system update

## Verification Commands

\`\`\`bash
# Check console.log removal
find frontend/src -name "*.ts" -exec grep -l "console\.log" {} \; | wc -l

# Check TypeScript issues
grep -r ": any" frontend/src --include="*.ts" | wc -l

# Check innerHTML usage  
grep -r "\.innerHTML" frontend/src --include="*.ts" | wc -l

# Run full test suite
make test
\`\`\`

## Files Backed Up
- backup-console-logs-$(date +%Y%m%d-%H%M%S).tar.gz

*Auto-generated by quick-fixes.sh*
EOF

echo "‚úÖ Quick fixes completed!"
echo -e "\nüìÑ Summary report: QUICK_FIXES_APPLIED.md"
echo -e "\nüéØ Next steps:"
echo "   1. Review changes with 'git diff'"
echo "   2. Run 'make test' to verify everything works"
echo "   3. Address high-priority manual fixes"
echo "   4. Commit changes: 'git add . && git commit -m \"Auto-fix: console.log and formatting issues\"'"

# Verification check
echo -e "\nüîç Quick verification..."
remaining_console=$(find frontend/src -name "*.ts" -exec grep -l "console\.log" {} \; 2>/dev/null | wc -l)
if [ "$remaining_console" -eq 0 ]; then
    echo "‚úÖ All console.log statements removed from source code"
else
    echo "‚ö†Ô∏è  $remaining_console files still contain console.log"
fi

echo -e "\nüöÄ Auto-fixes completed! Ready for manual refinements."
